#include <bits/stdc++.h>
using namespace std;
 
const int MAXN = 100005;
#define int long long
 
int t[4 * MAXN];
 
void build(int a[], int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = a[tl];
    } else {
        int tm = (tl + tr) / 2;
        build(a, v*2, tl, tm);
        build(a, v*2+1, tm+1, tr);
        t[v] = t[v*2] + t[v*2+1];
    }
}
 
int sum(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return 0;
    if (l == tl && r == tr) {
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return sum(v*2, tl, tm, l, min(r, tm))
           + sum(v*2+1, tm+1, tr, max(l, tm+1), r);
}
 
void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) {
        t[v] = new_val;
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = t[v*2] + t[v*2+1];
    }
}
 
bool isPrime(int x) {
    if (x <= 1) return false;
    for(int i = 2; i * i <= x; i++) {
        if(x % i == 0)
            return false;
    }
    return true;
}
 
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}
 
long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}
 
void sieve(int n) {
    vector<int> flag(n, 0);
    flag[0] = flag[1] = 1;            
    
    for(int i = 2; i < n; i++)                
    {
        if(flag[i] == 0)                 
        {
            for(int j = 2 * i; j < n; j += i)   
                flag[j] = 1;          
        }
    }
  
    for(int i = 0; i < n; i++) {
        if(flag[i] == 0)
            cout << i << " ";
    }
    cout << endl;
}
 
void _Come_on_Prahlad() {
  
  /*
  
कर्मण्येवाधिकारस्ते मा फलेषु कदाचन।
मा कर्मफलहेतुर्भूर्मा ते सङ्गोऽस्त्वकर्मणि॥
 
  */
         vector<int> vec;
         int res;
  
         int n;
        cin >> n;
        
        int arr[n];
       
        
        for(int i=0; i< n;i++)
        {
            cin >> arr[i];
        }
        
        for(int i = 0; i< n - 1;i++)
        {
            vec.push_back(max(arr[i], arr[i+1]));
        }
         res = vec[0];
        
        for(int i= 0; i< vec.size(); i++)
        {
            res = min(res, vec[i]);
        }
        
        cout << res - 1 << endl;
  
}
 
signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
 
    int t;
    cin >> t;
    while(t--) {
        _Come_on_Prahlad();
    }
    return 0;
}
