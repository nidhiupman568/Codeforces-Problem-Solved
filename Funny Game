#include <bits/stdc++.h>
 
using namespace std;
 
using ll = long long;
const int MOD = 1E9 + 7;
const int INF = 1E9; const ll INFLL = 1E18;
 
struct DSU {
	int n;
	vector<int> p;
	DSU(int n) {
		p.resize(n, -1);
	}
	int find(int x) {
		if(p[x] < 0) {
			return x;
		}
		int px = find(p[x]);
		p[x] = px;
		return px;
	}
	void unite(int x, int y) {
		int px = find(x); int py = find(y);
		if(px == py) {
			return;
		}
		if(p[px] > p[py]) {
			swap(px, py);
		}
		p[px] += p[py];
		p[py] = px;
	}
};
 
int n;
 
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int T; cin >> T;
	for(int test = 1; test <= T; test++) {
		cin >> n;
		vector<int> a(n);
		for(int i = 0; i < n; i++) {
			cin >> a[i];
		}
		DSU dsu(n);
		vector<array<int, 2>> wochien;
		for(int i = n - 1; i >= 1; i--) {
			vector<int> nodes;
			for(int j = 0; j < n; j++) {
				if(dsu.find(j) == j) {
					nodes.push_back(j);
				}
			}
			vector<int> v(i, -1);
			for(int j : nodes) {
				if(v[a[j] % i] == -1) {
					v[a[j] % i] = j;
				} else {
					wochien.push_back({v[a[j] % i], j});
					dsu.unite(v[a[j] % i], j);
					break;
				}
			}
		}
		reverse(wochien.begin(), wochien.end());
		cout << "YES\n";
		for(array<int, 2> i : wochien) {
			cout << i[0] + 1 << " " << i[1] + 1 << "\n";
		}
	}
}
