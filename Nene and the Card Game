#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<bitset>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<ctime>
#include<iomanip>
#include<iostream>
#include<queue>
#include<set>
#include<map>
#include<stack>
#include<vector>
#define int long long
using namespace std;
int arr[420000], arr2[420000], arr3[1200000], arr4[240000],arr5[1200000];
char c1[100][100];
int vis[1000][1000];
int arr1[1200][1200];
set<int>S;
map<int ,int>mp;
int dp[10];
int len;
string s;
signed main()
{
	std::ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t = 1;
	cin >> t;
	while (t--)
	{
        int n;
        cin >> n;
        for (int i = 1; i <= n + 1; i++)arr[i] = 0;
        int sum = 0;
        for (int i = 1; i <= n; i++)
        {
            int x;
            cin >> x;
            arr[x]++;
            if (arr[x] == 2)
                sum++;
        }
        cout << sum << endl;
	}
	return 0;
}
/* dfs飞机降落
#include <iostream>
using namespace std;
int arr[400000][10];
int n;
struct wd
{
  int T;
  int D;
  int L;
}nmd[10];
bool vis[10];
bool dfs(int a,int b)
{
    if(a==n)return true;
    else
    {
      for(int i=0;i<n;i++)
      {
        int t=nmd[i+1].T,d=nmd[i+1].D,l=nmd[i+1].L;
        if(!vis[i]&&t+d>=b)
        {
          vis[i]=true;
          if(dfs(a+1,max(b,t)+1))return true;
          vis[i]=false;
        }
      }
      return false;
    }
}
int main()
{
  // 请在此输入您的代码
  int t;
  cin>>t;
  while(t--)
  {
    cin>>n;
    for(int i=1;i<=n;i++)
    {
      cin>>nmd[i].T>>nmd[i].D>>nmd[i].L;
      for(int j=0;j<=10;j++)vis[j]=0;
      if(dfs(0,0))cout<<"YES"<<endl;
      else cout<<"NO"<<endl;
    }

  }
  return 0;
}
*/
/* KMP
#include <bits/stdc++.h>
const int N=1e6+9;
using namespace std;
char a[N],b[N];
int nex[N];
int main()
{
  cin>>a+1>>b+1;
  int n=strlen(a+1);
  int m=strlen(b+1);
  for(int i=2,j=0;i<=m;i++){
    while(j&&b[i]!=b[j+1])  j=nex[j];
    if(b[i]==b[j+1])  j++;
    nex[i]=j;
  }
  int ans=0;
  int cnt=0;
  for(int i=1,j=0;i-m+1<=n;i++){
    while(j&&a[i]!=b[j+1])  j=nex[j],cnt=0;
    if(a[i]==b[j+1])  j++,cnt++;
    ans=max(ans,cnt);
    if(j==m)  break;


  }
  cout<<ans;
  return 0;
}
*/
/* bfs
//look
#include <bits/stdc++.h>
using namespace std;

//创建两个矩阵,一个记录矩阵的形状，一个记录坐标点的位置
//矩阵中的0就是一个边界的值，困住不让他走出这个位置
int a[100][100] = {0};
int v[100][100] = {0};

//创建点再四个方向进行的移动试探造成的值的改变
int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};

//创建一个结构体 记录移动点的每一个位置坐标和移动到该点的步数
struct point{
    int x;
    int y;
    int step;
};



//创建一个现成函数的队列，将每一个移动压入这个队列里面
queue<point> r;


int main()
{
    int startx, starty;
    int endx, endy;
    int n, m;
    cin >> n >> m;

    for(int i=1; i<=n; i++) {
        for(int j=1; j<=m; j++) {
            cin >> a[i][j];
        }
    }

    //创建一个队列的对象
    point start;

    cin >> startx >> starty >> endx >> endy;

    start.x = startx;
    start.y = starty;
    start.step = 0;

    //将起始点的坐标进行一个标记，证明是走过这一个点
    v[startx][starty] = 1;

    //创建完这个点然后就是使用这个点压入队列里面
    r.push(start);

    int flag = 0; //创建一个找不到那个点的标注

    //对队列进行一次一次的遍历
    while(!r.empty()) {
        //只要还没达到最终的终点，就不能进行停止
        //那如何进行判断呢，首先需要进行的就是使用一个取出队列最前排的那一个函数进行比较
        int x = r.front().x;
        int y = r.front().y;

        //进行断开的那一个条件
        if (x == endx && y == endy) {
            flag = 1;    //让后面那个无法进行输出，证明这一个点是真实存在的一个点
            //打印出这时候的步数，打完就收工
            cout << r.front().step;
            break;
        }


        //for语句放在while循环里面
        for(int k=0; k<4; k++) {
        int tmpx, tmpy;
        tmpx = r.front().x + dx[k];//假如是照这个方向走了的话，那就是增加了一个数字1，然后在往后就是可以进行判断进行的
        tmpy = r.front().y + dy[k];
//        tmpx = x + dx[k];
//        tmpy = y + dy[k];

        //先加上那个点，然后检查那个点对应的坐标是否是可以移动到的
        //题目已经说了，如何该路段是可以行走的那就是代表是1
        if (a[tmpx][tmpy] == 1 && v[tmpx][tmpy] == 0)
        {
            //如果符合条件那就是需要进行转化一个新的点注入到这一个队列的新的位置
            //符合队列的数据结构就是队尾进入，队头退出的情况值
            point tmppoint;
            tmppoint.x = tmpx;
            tmppoint.y = tmpy;
            //记录步数的那一个数的值就是队列的队头元素
            tmppoint.step =  r.front().step + 1;

            //将新的一个元素放入队列里面
            r.push(tmppoint);

            //这一个点已经走过了，现在需要做的就是进行一个新的标注点的位置
            v[tmpx][tmpy] = 1;
        }
    }

    //r.pop()也是放在while()循环里面
    //退出的话，不需要进行使用参数传递，直接进行pop调用的一个参数就可以了
    //完成了数据的转化然后就是需要进行将队头元素进行删除，这样就可以让后面的元素的值进行
    r.pop();
    }




    //按照题目的要求是没用找到这一个点就是需要进行输出一个数字的值
    if (flag == 0) {
        cout << "-1";
    }

    return 0;
}
*/
/* 快速幂
#include<bits/stdc++.h>   //费马小定理
using namespace std;
typedef long long LL;
LL t, n;
const LL mod = 1e9+7;
LL ksm(LL a, LL b)   //快速幂
{
    LL s = 1;
    while(b)
    {
         if(b & 1)
            s = s * a % mod;
        a = a * a % mod;
        b >>= 1; 
    }
    return s;
}
int main()
{    
    cin >> t;
    for(int i = 1; i <= t; i++)
    {
        cin >> n;
        cout << ksm(n, mod-2) << endl;
    }
    return 0;
}
*/
/* 线性筛
#include<bits/stdc++.h>
using namespace std;
typedef long long LL;

const int N = 2e7 + 10;
int T;
LL primes[N], cnt, f[N];
bool st[N];

void get_primes(int n)//筛质数
{
    for(int i = 2; i < n; i ++)
    {
        if(!st[i]) primes[cnt ++] = i;
        for(int j = 0; primes[j] <= n / i; j ++)
        {
            st[primes[j] * i] = true;
            if(i % primes[j] == 0) break;
        }
    }
}

int main()
{
    scanf("%d", &T);

    get_primes(N - 10);
    //预处理f[n]
    for(register int i = 2; i <= N - 10; i ++)
        if(!st[i]) f[i] += (f[i - 1] + i);  //是质数最小质因子就是该数本身
        else
        {
            int j = 0;
            while(i % primes[j] != 0 && j < cnt) j ++;    //否则就找最小质因子
            f[i] += (f[i - 1] + primes[j]);
        }

    while(T --)
    {
        int n;
        scanf("%d", &n);
        printf("%lld\n", f[n]);
    }

    return 0;
}
*/
/* 并查集
#include <stdio.h>
int n,m;
int rep[200010];
int find(int x) {
    if(rep[x]!=x) rep[x]=find(rep[x]);
    return rep[x];
}
void unite(int x,int y) {
    rep[find(x)]=find(y);
}
int main() {
    scanf("%d%d",&n,&m);
    for(int i=1; i<=n; i++) {
        rep[i]=i;
    }
    while(m--) {
        int q,a,b;
        scanf("%d%d%d",&q,&a,&b);
        if(q==1) {
            unite(a,b);
        } else {
            if(find(a)==find(b)) {
                puts("YES");
            } else {
                puts("NO");
            }
        }
    }
    return 0;
}
*/
/* A*
#include<bits/stdc++.h>
using namespace std;
vector<vector<pair<int,int>>>g1,g2;
const int inf = 0x3f3f3f3f;
struct node{
    int pos, dis;
    friend bool operator < (const node&a,const node&b){
        return a.dis > b.dis;
    }
};
struct node1{
    int f, pos, h;                // A*：f = h + g;
    friend bool operator < (const node1&a,const node1&b){
         return a.f > b.f;
    }
};
int main (){
    ios::sync_with_stdio(0);
    cin.tie(0),cout.tie(0);
    int n, m;
    cin >> n >> m;
    g1.resize(n + 1),g2.resize(n + 1);
    vector<int>dis(n + 1,inf);
    vector<bool>vis(n + 1);
    for(int i = 1; i <= m; ++i){
        int u, v, w;
        cin >> u >> v >> w;
        g1[u].push_back({v,w});
        g2[v].push_back({u,w});
    }
    int s, t, k;
    cin >> s >> t >> k;
    auto Dijkstra = [&](auto self) -> void{
          priority_queue<node>q;
          q.push({t,0});
          while(q.size()){
              node a = q.top();
              q.pop();
              if(vis[a.pos])continue;
              vis[a.pos] = 1;
              dis[a.pos] = a.dis;
              for(auto [x,y] : g2[a.pos]){
                  if(dis[x] > y + a.dis){
                      dis[x] = y + a.dis;
                      q.push({x,dis[x]});
                  }
              }
          }
    };
    bool f = 0;
    Dijkstra(Dijkstra);
    auto Astra = [&](auto self) ->void{
         vector<int>cnt(n + 1);
         priority_queue<node1>q;
         q.push({dis[s],s,0});
         while(q.size()){
             node1 a = q.top();
             q.pop();
            cnt[a.pos]++;
            if(a.pos == t && cnt[a.pos] == k){
                cout << a.h << endl;
                f = 1;
                return;
            }
            if(cnt[a.pos] > k)continue;
            for(auto [x,y]:g1[a.pos]){
                q.push({dis[x] + a.h + y,x,a.h + y});
            }
         }
    };
    Astra(Astra);
    if(!f){
       cout << -1 << endl;
    }
    return 0;
}
*/
/* dijkstra
* #include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node{
    int val;
    int weight;
    struct Node* next;
} node;
typedef struct element{
    int val;
    struct element* next;
} el; //拿上面的node用也可以
typedef struct Queue{
    el* head;
    el* tail;
} queue;

int main()
{
    int N, M, i, j, k, a;
    scanf("%d %d", &N, &M);
    long int dist[++N];
    queue q;
    node* p, *map[N];
    //初始化
    memset(map, 0, N * sizeof(node*));
    for(i = 0; i < N; i++)
        dist[i] = -1;
    //建立邻接表
    for(k = dist[1] = 0; k < M; k++)
    {
        scanf("%d %d %d", &i, &j, &a);
        p = map[i];
        if(!p){
            p = map[i] = (node *)malloc(sizeof(node));
            goto A;
        }
        while(p->next) p = p->next;
        p = p->next = (node *)malloc(sizeof(node));
A:
        p->val = j, p->weight = a, p->next = NULL;
    }
    //1 入队
    el* fv = (el*)malloc(sizeof(el));
    fv->val = 1, fv->next = NULL;
    q.head = q.tail = fv;
    //核心算法
    while(q.head){
        //取队头值
        j = q.head->val;
        p = map[j];
        //刷新距离
        for( ; p; p = p->next){
            a = p->val;
            if (dist[a] < 0 || dist[a] > dist[j] + p->weight){
                dist[a] = dist[j] + p->weight;
                //入队进一步优化最短距离
                fv = (el *)malloc(sizeof(el));
                fv->val = a, fv->next = NULL;
                q.tail = q.tail->next = fv;
            }
        }
        //出队头
        fv = q.head, q.head = q.head->next;
        free(fv);
    }
    for(i = 1; i < N; i++)
        printf("%ld ", dist[i]);
    return 0;
}
*/
/* floyd
#include <bits/stdc++.h>
#define ll long long
#define INF 0x3f3f3f3f3f3f3f3f

using namespace std;

const int MAXN = 405;

//无向图
typedef struct {
    ll vex[MAXN]; //顶点表
    ll arc[MAXN][MAXN]; //邻接矩阵
    ll vexnum; //顶点数
    ll arcnum; //边数
}Graph;

Graph G;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    ll n, m, q;
    cin >> n >> m >> q;
    memset(G.arc, 0x3f, sizeof(G.arc));
    for(int i = 0; i <= n; i++) {
        G.arc[i][i] = 0;
    }

    for(int i = 0; i < m; i++) {
        ll u, v, w;
        cin >> u >> v >> w;
        G.arc[u][v] = min(G.arc[u][v], w);   //特别强调这里要使用min判断
        G.arc[v][u] = min(G.arc[v][u], w);
    }

    for(int k = 1; k <= n; k++) {
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= n; j++) {
                G.arc[i][j] = min(G.arc[i][j], G.arc[i][k] + G.arc[k][j]);
            }
        }
    }

    while(q--) {
        int st, ed;
        cin >> st >> ed;
        if(G.arc[st][ed] == INF) {
            cout << "-1" << endl;
        }
        else {
            cout << G.arc[st][ed] << endl;
        }
    }

    return 0;
}
*/

//mutsumi鏈変竴鴏涓暟缁勶紝叩濂规兂鐭麚ラ亾鏁扮粍涓斖鏁板拰璐熸暟縩鍏辨湁鍑韠犱釜銆?
//int tot = 0;
//int add(int x, int y)//建立一条由x指向y的边 
//{
//	arr2[++tot] = y;
//	arr4[tot] = arr5[x];
//	arr5[x] = tot;
//	return 0;
//}
//int dfs(int x, int y)//x子节点，y最终点 
//{
//	if (arr[x] != 0)return 0;
//	arr[x] = y;
//	for (int i = arr5[x]; i; i = arr4[i])
//		if (arr[arr2[i]] == 0)
//			dfs(arr2[i], y);
//	return 0;
//}
//signed main()
//{
//	std::ios::sync_with_stdio(false);
//	cin.tie(0);
//	cout.tie(0);
//	int t = 1;
//	//cin >> t;
//	while (t--)
//	{
//		int n, m;
//		cin >> n >> m;
//		for (int i = 0; i < m; i++)
//		{
//			int n1, n2;
//			cin >> n1 >> n2;
//			add(n2, n1);//反向加边 
//		}
//		for (int i = n; i > 0; i--)
//			dfs(i, i);
//		for (int i = 1; i <= n; i++)
//		{
//			cout << arr[i] << " ";
//		}
//
//	}
//	return 0;
//}
//
//typedef struct
//{
//    int* array;
//    int length;
//}Darray;
//Darray* create(Darray* b, int n) //Darray create(int n)
//{
//    int i;
//
//    b->array = (int*)malloc(n * sizeof(int)); // 向系统申请内存
//    if (b->array == NULL)  //确保指针使用前是非空指针
//    {
//        b->length = 0;
//        return b;
//    }
//    else
//    {
//        b->length = n;
//        printf("Please input %lld elements\n", n);
//        for (i = 0; i < n; i++)
//            scanf_s("%lld", &b->array[i]);
//    }
//    return b;
//}
////生成一个新的顺序表
//Darray* Grow(Darray* aPtr, int n)
//{
//    int* p, i;
//    p = (int*)malloc(n * sizeof(int));
//    // 向系统申请内存
//    if (p == NULL)  //确保指针使用前是非空指针
//        //当p为空指针时结束程序运行
//        return aPtr;
//    else
//    {
//        for (i = 0; i < aPtr->length; i++)
//            p[i] = aPtr->array[i];
//        //printf("Please input another %d elements\n", n / 2);
//        //for (i = aPtr->length; i < n; i++)
//        //    scanf_s("%d", &p[i]);
//        free(aPtr->array);
//        aPtr->array = p;
//    }
//}
////打印顺序表所有数据项
//void PrintA(Darray* aPtr)
//{
//    int i;
//    for (i = 0; i < aPtr->length; i++) printf("%lld  ", aPtr->array[i]);
//    printf("\n");
//    return;
//}
////释放动态空间
//void ReleaseA(Darray* aPtr)
//{
//    free(aPtr->array);
//    return;
//}
//Darray* insert_sq(Darray* sq, int i, int* n, int d) {
//    if (i >= sq->length + 1)
//        return (Darray*)0;
//    if (sq->length >= *n)
//    {
//        Grow(sq, (*n) * 2);
//        *n *= 2;
//    }
//    for (int j = sq->length - 1; j >= i; j--)
//        sq->array[j + 1] = sq->array[j];
//    sq->array[i] = d;
//    ++sq->length;
//    return sq;
//}
//Darray* eraser_sq(Darray* sq, int i) {
//    if (i >= sq->length)
//        return (Darray*)0;
//    for (int j = i; j < sq->length; j++)
//        sq->array[j] = sq->array[j + 1];
//    --sq->length;
//    return sq;
//}
//signed main()
//{
//    Darray* sq;
//    int n;
//    sq = (Darray*)malloc(sizeof(Darray));
//    if (sq == NULL) {
//        printf(" NULL\n"); return 0;
//    }
//    printf("How many elements?\n");
//    scanf_s("%lld", &n);
//    sq = create(sq, n);//
//    PrintA(sq);
//    int i, d;
//    printf("请输入你要插入的位置及元素:\n");
//    scanf_s("%lld%lld", &i, &d);
//    insert_sq(sq, i - 1, &n, d);
//    PrintA(sq);
//    printf("请输入你要删除的元素的位置:\n");
//    scanf_s("%lld", &i);
//    eraser_sq(sq, i - 1);
//    PrintA(sq);
//    ReleaseA(sq);// 释放向系统申请的内存
//    return 0;
//}

//创建顺序表}// 12  32 21 51 1 2 3 4 5
//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<iostream>
//#include<algorithm>
//#include<bitset>
//#include<cmath>
//#include<cstdio>
//#include<cstring>
//#include<ctime>
//#include<iomanip>
//#include<iostream>
//#include<queue>
//#include<set>
//#include<stack>
//#include<vector>
//#define int long long
//using namespace std;
//int arr[2000][2000], arr2[420000], arr3[400000], arr4[100000];
//signed main()
//{
//	std::ios::sync_with_stdio(false);
//	cin.tie(0);
//	cout.tie(0);
//	int t = 1;
//	cin >> t;
//	while (t--)
//	{
//		
//		int n,m,k,d;
//		cin >> n >> m >> k >> d;
//		for (int i = 1; i <= n + 2; i++)arr3[i - 1] = 0;
//		for (int i = 1; i <= 1001; i++)for (int j = 1; j <= 1001; j++)arr[i][j] = 0;
//		for (int i = 1; i <= n; i++)
//		{
//			for (int j = 1; j <= m; j++)
//			{
//				cin >> arr[i][j];
//				
//				if(j!=1&&j!=m)arr[i][j]++;
//				int minn = 1e9 + 7;
//				if (j>d+1)
//				{			
//					for (int q = d + 1; q >= 1; q--)
//					{
//						if (arr[i][j - q] < minn)
//							minn = arr[i][j - q];
//				    }
//					arr[i][j] += minn;
//					//arr[i][j]++;
//				}
//			}
//		}
//		for (int i = 1; i <= n; i++)
//			arr3[i - 1] = arr[i][m];
//		sort(arr3, arr3 + n);
//		int sum = 0;
//		for (int i = 1; i <= k; i++)
//		{
//			sum += arr3[i - 1];
//			sum+=2;
//		}
//		cout << sum << endl;
//	}
//	return 0;
//}/// 
// 10 0
// 100 10
// 1000 180
// 99999 
// 998244353
// 148//mmanapi
// 5 10 
//1 1 1 1 1
//1 1 1 1

//  ? 1 ? 2

// 2 4 6 

//  34 =4    23 =3   523=23 323=23
// arr[23]=523
// arr[24]
// 
// 
//
