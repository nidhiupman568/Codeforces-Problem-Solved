#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;




#define int long long int
#define endl "\n"
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountint

#define all(x) (x).begin(), (x).end()





typedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> pbds;
// find_by_order, order_of_key


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}
// void _print(set t){cerr<<t;}


template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
int MOD = 1e9+7;
int N1 = 1e9 + 7;
int inf = 1e18;
int aaa = 998244353;

vector<int> fac;

/****************************************************************************************************************************/
int reverseBits(int z) {int rev = 0; int n = z; while (n > 0) {rev <<= 1; if (n & 1 == 1)rev ^= 1; n >>= 1;} return rev;}
int strtoint(const string &s) {int n = s.length(); int num = 0; for (int i = 0; i < n; i += 1) num = num * 10 + (s[i] - '0'); return num;}
string inttostr(int n) {string s; if (n < 10) {s.pb('0' + n); return s;} s = inttostr(n / 10); s.pb('0' + n % 10); return s;}
int gcd(int a, int b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}
int expo(int a, int b, int mod) {int res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
void extendgcd(int a, int b, int*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); int x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3
int lcm(int a, int b) {return (a * b) / gcd(a, b);}
int countDivisors(int n) {int cnt = 0; for (int i = 1; i <= sqrt(n); i++) {if (n % i == 0) {if (n / i == i)cnt++; else cnt = cnt + 2;}} return cnt;}

int mminv(int a, int b) {int arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b
int mminvprime(int a, int b) {return expo(a, b - 2, b);}
bool revsort(int a, int b) {return a > b;}
int combination(int n, int r, int m, int *fact, int *ifact) {int val1 = fact[n]; int val2 = ifact[n - r]; int val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}
void google(int t) {cout << "Case #" << t << ": ";}
vector<int> primeFactors(int n) {vector<int>ret; while (n % 2 == 0) {ret.pb(2); n = n / 2;} for (int i = 3; i <= sqrt(n); i = i + 2) {while (n % i == 0) {ret.pb(i); n = n / i;}} if (n > 2) {ret.pb(n);} return ret;}
// vector<int> prime(int n) {int*arr = new int[n + 1](); vector<int> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = ((int)(i) * (int)(i)); j <= n; j += i)arr[j] = 1;} return vect;}
vector<int>divisor(int n) {vector<int>res; for (int i = 1; i <= sqrt(n); i++) {if (n % i == 0) {if (n / i == i)res.pb(i); else {res.pb(i); res.pb(n / i);} }} return res;}
// vector<int>sieve(){int MAXN=1e7;vector<int>spf(MAXN);spf[1] = 1;for (int i=2; i<MAXN; i++)spf[i] = i;for (int i=4; i<MAXN; i+=2)spf[i] = 2;for (int i=3; i*i<MAXN; i++){if (spf[i] == i){for (int j=i*i; j<MAXN; j+=i)if (spf[j]==j)spf[j] = i;}}return spf;}
int countnumber(int n) {int cnt = 0; while (n > 0) {cnt++; n /= 10;} return cnt;}
// vector<int>countSmainterRight(vector<int>arr){pbds s;int n = arr.size();vector<int> ans;for (int i = n - 1; i >= 0; i--) {if (i == n - 1) { ans.push_back(0);}else {ans.push_back(s.order_of_key({ arr[i], i }));}s.insert({ arr[i], i });}reverse(ans.begin(), ans.end());return ans;}
int mod_add(int a, int b, int m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
int getupper(int k) {int x = 8 * k + 1; int sqr = sqrt(x); if ((sqr * sqr) == x) {sqr--; return (sqr / 2);} sqr--; return (sqr / 2) + 1;}
int get2upper(int n, int rem) {int a = (2 * n) + 1; int s = ((4 * n * n) + (4 * n) + 1) - (8 * rem); int sqr = sqrt(s); if ((sqr * sqr) == s) {return ((a - sqr) / 2) - 1;} sqr++; return ((a - sqr) / 2);}
int mod_mul(int a, int b, int m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
int mod_sub(int a, int b, int m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
int mod_div(int a, int b, int m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m
int modPower(int x, int y) {int res = 1; x = x % MOD; if (x == 0)return 0; while (y > 0) {if (y & 1)res = (res * x) % MOD; y = y / 2; x = (x * x) % MOD;} return res;}
int phin(int n) {int number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (int i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))
int modFact(int n) {if (n >= MOD)return 0; int result = 1; for (int i = 1; i <= n; i++)result = (result * i) % MOD; return result;}
int power(int x, int y) {int res = 1; while (y > 0) {if (y & 1)res = res * x; y = y >> 1; x = x * x;} return res;}
int negMOD(int x) {x = -x; int s = x / MOD; if (x % MOD)s++; return (MOD * s) - x;}
void precision(int a) {cout << setprecision(a) << fixed;}

  int sb(int x){
    int cnt=0;
    for(int i=0;i<32;i++){
      if((1<<i)&x) cnt++;
    }


    return cnt;
  }



int powb(int base, int po, int mood) {base %= mood; if (base == 1 || po == 0) return 1; if (po == 1) return base % mood; if (po & 1) {int x = powb(base, po / 2,mood) % mood; return (((x * x) % mood) * base) % mood;} int x = powb(base, po / 2,mood) % mood; return (x * x) % mood;}
void precFac(int n) {fac.assign(n + 1, 1); fac[0] = 1; for (int i = 1; i < n + 1; i++)(fac[i] = (fac[i - 1] * (i % MOD)) % MOD) %= MOD;}
int nCrmom(int n, int r) {if (n < r) return 0; if (r == 0) return 1; return (((fac[n] * powb(fac[r], MOD - 2,MOD)) % MOD) * powb(fac[n - r], MOD - 2,MOD)) % MOD;}
/*prime-O(n*log(log(n)));
 smaintest prime factor-O(log(n));
 a%(b+c)=0 <=> a%c = b%c */
/*--------------------------------------------------------------------------------------------------------------------------*/;
// struct Cmp {
//   bool operator()(const pair<int,int>& p1, const pair<int,int>& p2)
//   {


//     if (p1.ff > p2.ff) return true;
//     else if (p1.ff== p2.ff && p1.ss > p2.ss) {
//       return true;
//     }
//     else return false;


//   }
// };



// struct custom_hash {
//     static uint64_t splitmix64(uint64_t x) {
//         // http://xorshift.di.unimi.it/splitmix64.c
//         x += 0x9e3779b97f4a7c15;
//         x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
//         x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
//         return x ^ (x >> 31);
//     }

//     size_t operator()(uint64_t x) const {
//         static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
//         return splitmix64(x + FIXED_RANDOM);
//     }
// };

// unordered_map<long long, int, custom_hash> safe_map;
// gp_hash_table<long long, int, custom_hash> safe_hash_table;


// Trie

//     class Trie{

// public:
//  Trie* arr[26];
//  bool flag;


// };


// Trie* newNode(){
//  Trie* temp= new Trie();

//  for(int i=0;i<26;i++) temp->arr[i]=NULL;

//  temp->flag=false;

//  return temp;
// }


// void ins(string s, Trie* root){



//  for(int i=0;i<s.size();i++){
//   cout<<"HELLO\n";
//   if(root->arr[s[i]-'a']==NULL){
//     root->arr[s[i]-'a']=newNode();
//   }

//    root=root->arr[s[i]-'a'];
//  }
//  root->flag=1;

// }

// bool search(string s, Trie* root){
//    Trie* temp=root;
//    for(int i=0;i<s.size();i++){
//      if(temp->arr[s[i]-'a']==NULL) return false;
//      temp=temp->arr[s[i]-'a'];
//    }

//    if(temp->flag==1) return true;
//    else return false;


// }



//  Roll Hashing

// Uncomment this
// vector<int> hsh1,hsh2;
// vector<int> po1,po2; //power p^k%m

// vector<int> inv1,inv2;


// pair<int,int> PP;




// vector<int> justhsh(string& s){

//  const  int m1=998244353;

//     int n=s.size();
//     int sum1=0;
//     int p1=1;
//     for(int i=0;i<n;i++){
       
//         sum1+=(s[i]-'a'+1)*p1; 
//         sum1%=m1;
//         p1*=31;
//         p1%=m1;
       
//     }


//    const  int m2=1e9+7;


//     int sum2=0;
//     int p2=1;
//     for(int i=0;i<n;i++){
       
//         sum2+=(s[i]-'a'+1)*p2; 
//         sum2%=m2;
//         p2*=23;
//         p2%=m2;
       
//     }
//     return {sum1,sum2};

// }

// void helper(string &s){

//   const int m1=998244353;


//     int n=s.size();
//     inv1.resize(n);
//     inv2.resize(n);

//     int p1=1;
    

//     int AA= powb(31,m1-2,m1);
 
//     int sum1=0;
    
//     for(int i=0;i<n;i++){
//         po1.push_back(p1);

//        if(i==0) inv1[i]=1;
//        else inv1[i]=(inv1[i-1]*AA)%m1;
        
//         sum1+=(s[i]-'a'+1)*p1;
//         sum1%=m1;
//         p1*=31;
//         p1%=m1;
//         hsh1.push_back(sum1);
//     }



//   const int m2=1e9+7;
//     int p2=1;
    

 
//     int sum2=0;

//     int BB=powb(23,m2-2,m2);
    
//     for(int i=0;i<n;i++){
//         po2.push_back(p2);

//         if(i==0) inv2[i]=1;
//         else inv2[i]=(inv2[i-1]*BB)%m2;
       

//         sum2+=(s[i]-'a'+1)*p2;
//         sum2%=m2;
//         p2*=23;
//         p2%=m2;
//         hsh2.push_back(sum2);
//     }
// }

// pair<int,int> subhsh(int i, int j){
//  const int m1=998244353;

//     int a=hsh1[j];
//     int b=0;
//     if(i>0) b=hsh1[i-1];
//     int x1= (a-b+m1)%m1;
   
//     x1=(x1*inv1[i])%m1;



//  const int m2=1e9+7;

//     int A=hsh2[j];
//     int B=0;
//     if(i>0) B=hsh2[i-1];
//     int x2= (A-B+m2)%m2;
   
//     x2=(x2*inv2[i])%m2;

//     PP.ff=x1;
//     PP.ss=x2;

//     return  PP;
    
// }

// bool comp1(int i1, int j1, int i2, int j2){
//   // comparison of substrings [i1,j1] and [i2,j2]
  
//   pair<int,int> V1=subhsh(i1,j1);
//   pair<int,int> V2=subhsh(i2,j2);
//   if(V1==V2) return 1;
//   else return 0;
// }



// Segment Tree
// vector<int> seg;

// void buildseg(vector<int>& V, int ind, int low, int high) {
//   if (low == high) {
//     seg[ind] = V[low];
//     return;
//   }
//   int mid = (low + high) / 2;

//   buildseg(V, 2 * ind + 1, low, mid);
//   buildseg(V, 2 * ind + 2, mid + 1, high);

//   int lef=seg[2*ind+1];
//   int rig=seg[2*ind+2];

//   seg[ind]=lef+rig;

// }

// int query(int l , int r, int ind, int low, int high) {
//   if (low >= l && high <= r) return seg[ind];

//   if (l > high || r < low) return 0; // since we are trying to find min between ranges
//   int mid = (low + high) / 2;

//   int lef = query(l, r, 2 * ind + 1, low, mid);
//   int rig = query(l, r, 2 * ind + 2, mid + 1, high);

//   return lef+rig ;
// }

// void update(int ind1,int val, int ind, int low, int high){

//   if(ind1<low || ind1>high) return;


//   if(low==high){

//     seg[ind]=val;
//     return;
//   }
 
//   int mid=(low+high)/2;

//  update(ind1,val, 2*ind+1,low, mid );
//  update(ind1, val, 2*ind+2,mid+1,high);

//   seg[ind] = (seg[2 * ind + 1] + seg[2 * ind + 2]);
  
// }
  
 



void solve() {
int n;cin>>n;
string s;cin>>s;

vector<int> win(2,0);

for(int x=1;x<=n;x++){
   for(int y=1;y<=n;y++){
      int xa=0, ya=0, xb=0, yb=0;
      int YA=0, YB=0;
      for(int i=0;i<n;i++){


         if(s[i]=='A') xa++;
         if(s[i]=='B') xb++;
         // if(x==2 && y==3) cout<<i<<" -> "<<xa<<" "<<xb<<" "<<YA<<" "<<YB<<endl; 

         if(xa==x) YA++, xa=0, xb=0;
         if(xb==x) YB++, xa=0,xb=0;
         if(YA==y){
            if(i!=n-1) break; 
            win[0]++;
            // cout<<x<<" "<<y<<" "<<win[0]<<" "<<win[1]<<endl;
            break;
         }
         if(YB==y){
            if(i!=n-1) break;
            win[1]++;
            // cout<<x<<" "<<y<<" "<<win[0]<<" "<<win[1]<<endl;

            break;
         }
      }
      // debug(win)
   }
}

if(win[0]!=0 && win[1]==0) cout<<"A\n";
else if(win[1]!=0 && win[0]==0) cout<<"B\n";
else cout<<"?\n";





}





signed main()
{
#ifndef ONLINE_JUDGE
  freopen("Error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
#endif


  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
  // se();






  

  int t1 = 1;
  cin>>t1;





  for (int kk = 1; kk <= t1; kk++) {


    // cout<<"Scenario #"<<i<<":"<<endl;
    solve();
  }



  return 0;
}


