#include <bits/stdc++.h>
using namespace std;
/*-----------------------------------------------------------------------------*/
#define fastio                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(0);                       \
    cout.tie(0)

#define mmt memset
#define endl '\n'
#define mod 1000000007
#define inf INT_MAX
#define pb push_back
#define ppb pop_back
#define ff first
#define ss second
#define rd(n) ll n; cin>>n
#define rs(s) string s; cin>>s
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define br break ;
#define cnu continue ;
#define ump unordered_map
#define pq priority_queue
#define pr_yy cout<<"YES" ;
#define pr_nn cout<<"NO" ;
#define nnn cout<<-1 ;
#define re return
#define flush cout.flush() ;


typedef vector<int> vi;
typedef vector<long long> vll;

// #define int long long

typedef long long ll;
typedef vector<int> vi;

/*---------------------------------------------FUNCTIONS-----------------------------*/
// maximum from the vay
ll MaxFromvay(ll v[], ll n)
{
    ll max = v[0];
    for (ll i = 1; i < n; i++)
        if (v[i] > max)
            max = v[i];

    return max;
}

// minimum from the vay
int MinFromvay(int v[], int n)
{
    int res = v[0];
    for (int i = 1; i < n; i++)
        res = min(res, v[i]);
    return res;
}

/*Checking if prime*/
ll isPrime(ll a)
{
    for (ll i = 2; i * i <= a; i++)
    {
        if (a % i == 0)
            return 0;
    }
    return 1;
}

string to_binary(int n) {
    string s;
    while (true) {
        s = to_string(n % 2) + s;
        n /= 2;
        if (n == 0) break;
    }
    return s;
}

int PowerFunc(int a, int b)
{
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a);
            b--;
        }
        a = (a * a);
        b >>= 1;
    }
    return ans;
}
/*Factorial*/

// ll factorial(ll n)
// {
//     return (n == 1 || n == 0) ? 1 : n * factorial(n - 1);
// }

/*Combination Function*/

ll nCr(ll n, ll k)
{
    ll ans = 1;
    if (k > n - k)
    {
        k = n - k;
    }
    for (int i = 1; i <= k; i++)
    {
        ans *= (n - i + 1), ans /= i;
    }
    return ans;
}

ll binarypower(ll a, ll b)
{
    ll ans = 1;
    while (b > 0)
    {
        if (b & 1)
            ans = ans * a;
        a = a * a;
        b >>= 1;
    }
    return ans;
}

ll Count_Occurrences(ll v[], ll n, ll x)
{
    ll ans = 0;
    for (int i = 0; i < n; i++)
        if (x == v[i])
            ans++;
    return ans;
}

ll manhatten(ll a, ll b, ll c)
{
    return abs(a - b) + abs(a - c) + abs(b - c);
}

// count the number of primes
int count_primes(int n)
{
    const int S = 10000;

    vector<int> primes;
    int nsqrt = sqrt(n);
    vector<char> is_prime(nsqrt + 2, true);
    for (int i = 2; i <= nsqrt; i++)
    {
        if (is_prime[i])
        {
            primes.push_back(i);
            for (int j = i * i; j <= nsqrt; j += i)
                is_prime[j] = false;
        }
    }

    int result = 0;
    vector<char> block(S);
    for (int k = 0; k * S <= n; k++)
    {
        fill(block.begin(), block.end(), true);
        int start = k * S;
        for (int p : primes)
        {
            int start_idx = (start + p - 1) / p;
            int j = max(start_idx, p) * p - start;
            for (; j < S; j += p)
                block[j] = false;
        }
        if (k == 0)
            block[0] = block[1] = false;
        for (int i = 0; i < S && start + i <= n; i++)
        {
            if (block[i])
                result++;
        }
    }
    return result;
}



/*DFS*/

// vector<vector<int>> adj; // graph represented as an adjacency list
// int n; // number of vertices

// vector<bool> visited;

// void dfs(int v) {
//     visited[v] = true;
//     for (auto &u : adj[v]) {
//         if (!visited[u])
//             dfs(u);
//     }
// }




/*BFS*/

// vector<vector<int>> adj;  // adjacency list representation
// int n; // number of nodes
// int s; // source vertex

// queue<int> q;
// vector<bool> used(n);
// vector<int> d(n), p(n);

// q.push(s);
// used[s] = true;
// p[s] = -1;
// while (!q.empty()) {
//     int v = q.front();
//     q.pop();
//     for (int u : adj[v]) {
//         if (!used[u]) {
//             used[u] = true;
//             q.push(u);
//             d[u] = d[v] + 1;
//             p[u] = v;
//         }
//     }
// }



/*HEAPIFY*/

// void heapify(vector<int> &arr, int N, int i)
// {
//     int largest = i;
//     int left = 2 * i + 1;
//     int right = 2 * i + 2;
//     if (left < N && arr[left] > arr[largest])
//         largest = left;
//     if (right < N && arr[right] > arr[largest])
//         largest = right;
//     if (largest != i) {
//         swap(&arr[i], &arr[largest]);
//         heapify(arr, N, largest);
//     }
// }



/*KADANES ALGO*/

// int maxsumsubarray(vector<int> &v){
//     int max_so_far = INT_MIN;
//     int n = v.size();
//     int max_ending_here = 0;
//     for(int i=0;i<n;i++){
//         max_ending_here += v[i];
//         if(max_so_far < max_ending_here){
//             max_so_far = max_ending_here;
//         }
//         if(max_ending_here < 0){
//             max_ending_here = 0;
//         }
//     }
//     return max_so_far;
// }



/*TOPO SORT*/

// void dfs(int v){
//     vis[v] = true;
//     for(auto u: adj[v]){
//         if(!vis[u]){
//             dfs(u);
//         }
//     }
//     ans.push_back(v);
// }

// void topologicalSort(){
//     vector<int> vis(n, false);
//     for(int i=0;i<n;i++){
//         if(!vis[i]){
//             dfs(i);
//         }
//     }
//     reverse(ans.begin(), ans.end());
// }

/*-----------------------------------------------------------------------------*/

void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }

/*-----------------------------------------------------------------------------*/
template <typename T, typename V>
void __print(const pair<T, V> &x)
{
    cerr << '{';
    __print(x.first);
    cerr << ',';
    __print(x.second);
    cerr << '}';
}
/*-----------------------------------------------------------------------------*/
template <typename T>
void __print(const T &x)
{
    int f = 0;
    cerr << '{';
    for (auto &i : x)
        cerr << (f++ ? "," : ""), __print(i);
    cerr << "}";
}
void _print() { cerr << "]\n"; }
/*-----------------------------------------------------------------------------*/
template <typename T, typename... V>
void _print(T t, V... v)
{
    __print(t);
    if (sizeof...(v))
        cerr << ", ";
    _print(v...);
}
/*-----------------------------------------------------------------------------*/
#ifndef ONLINE_JUDGE
#define debug(x...)               \
    cerr << "[" << #x << "] = ["; \
    _print(x)
#else
#define debug(x...)
#endif

const int MOD = 1e9 + 7;
const int MOD2 = 998244353;



int maxBitElement(int arr[], int n)
{

    // To store the required element and
    // the maximum set bits so far
    int num = 0, max = -1;

    for (int i = 0; i < n; i++)
    {

        // Count of set bits in
        // the current element
        int cnt = __builtin_popcount(arr[i]);

        // Update the max
        if (cnt > max)
        {
            max = cnt;
            num = arr[i];
        }
    }
    return num;
}


/*SEGMENT TREE*/

// int n, t[4 * MAXN];
// void build(int a[], int v, int tl, int tr) {
//     if (tl == tr) {
//         t[v] = a[tl];
//     } else {
//         int tm = (tl + tr) / 2;
//         build(a, v * 2, tl, tm);
//         build(a, v * 2 + 1, tm + 1, tr);
//         t[v] = t[v * 2] + t[v * 2 + 1];
//     }
// }
// int sum(int v, int tl, int tr, int l, int r) {
//     if (l > r)
//         return 0;
//     if (l == tl && r == tr) {
//         return t[v];
//     }
//     int tm = (tl + tr) / 2;
//     return sum(v * 2, tl, tm, l, min(r, tm))
//            + sum(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
// }
// void update(int v, int tl, int tr, int pos, int new_val) {
//     if (tl == tr) {
//         t[v] = new_val;
//     } else {
//         int tm = (tl + tr) / 2;
//         if (pos <= tm)
//             update(v * 2, tl, tm, pos, new_val);
//         else
//             update(v * 2 + 1, tm + 1, tr, pos, new_val);
//         t[v] = t[v * 2] + t[v * 2 + 1];
//     }
// }

// unsigned long long factorial(int n) {
//     unsigned long long fac = 1;
//     for ( long long i = 2; i <= n; i++)
//         fac *= i;
//     return fac;
// }

// long long factorial(long long i){
//     if (i == 0){
//         return (1);
//     }
//     else{
//         return (i * factorial(i - 1));
//     }
// }


// unsigned long long sum_fact(vector<int> &v) {
//     long long n = v.size();
//     long long ans = 0;
//     for (ll i = 0; i < n; i++) {
//         ans += factorial(v[i]);
//     }
//     return ans;
// }



int maxsumsubarray(vector<int> &v) {
    int max_so_far = INT_MIN;
    int n = v.size();
    int max_ending_here = 0;
    for (int i = 0; i < n; i++) {
        max_ending_here += v[i];
        if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
        }
        if (max_ending_here < 0) {
            max_ending_here = 0;
        }
    }
    return max_so_far;
}


int maxlength_1(string s)
{
    int n = s.length(), i, j;
    int ans = 0;
    for (i = 0; i < n; i++) {
        if (s[i] == '1') {

            int count = 1;
            for (j = i + 1; j <= n - 1
                    && s[j] == '1';
                    j++)
                count++;
            ans = max(ans, count);
        }
    }
    return ans;
}

int maxlength_0(string s)
{
    int n = s.length(), i, j;
    int ans = 0;
    for (i = 0; i < n; i++) {
        if (s[i] == '0') {

            int count = 1;
            for (j = i + 1; j <= n - 1
                    && s[j] == '0';
                    j++)
                count++;
            ans = max(ans, count);
        }
    }
    return ans;
}

int findGCD(vector<int> &arr) {
    int n = arr.size();
    int result = arr[0];
    for (int i = 1; i < n; i++)
    {
        result = __gcd(arr[i], result);

        if (result == 1)
        {
            return 1;
        }
    }
    return result;
}


void dfs(int ind, int d, vector<vector<int>>&graph, vector<int>&pwr, set<int>&st) {
    if (st.find(ind) != st.end())return;
    if (pwr[ind] >= d)return;
    st.insert(ind);
    for (auto k : graph[ind]) {
        if (pwr[k] < d)
            dfs(k, pwr[ind], graph, pwr, st);
    }
    return;
}


// bool have_same_frequency(map<char, int>& freq, int k)
// {
//     for (auto& pair : freq) {
//         if (pair.second != k && pair.second != 0) {
//             return false;
//         }
//     }
//     return true;
// }

// int count_substrings(string s, int k)
// {
//     int count = 0;
//     int distinct = (set<char>(s.begin(), s.end())).size();
//     for (int length = 1; length <= distinct; length++) {
//         int window_length = length * k;
//         map<char, int> freq;
//         int window_start = 0;
//         int window_end = window_start + window_length - 1;
//         for (int i = window_start;
//              i <= min(window_end, s.length() - 1); i++) {
//             freq[s[i]]++;
//         }
//         while (window_end < s.length()) {
//             if (have_same_frequency(freq, k)) {
//                 count++;
//             }
//             freq[s[window_start]]--;
//             window_start++;
//             window_end++;
//             if (window_length < s.length()) {
//                 freq[s[window_end]]++;
//             }
//         }
//     }
//     return count;
// }


// int findMaxGCD(vector<int> &arr, int n) {
//     int high = 0;
//     for (int i = 0; i < n; i++)
//         high = max(high, arr[i]);
//     int count[high + 1] = {0};
//     for (int i = 0; i < n; i++)
//         count[arr[i]]++;
//     int counter = 0;
//     for (int i = high; i >= 1; i--)
//     {
//         int j = i;
//         counter = 0;
//         while (j <= high)
//         {

//             if (count[j] >= 2)
//                 return j;

//             else if (count[j] == 1)
//                 counter++;
//             j += i;
//             if (counter == 2)
//                 return i;
//         }
//     }
// }

// int maximumpairs(vector<int> &arr, int n){
//     int idx = 0;
//     for (int i = 0; i < n; i++) {
//         if (arr[i] % 2 == 0) {
//             swap(arr[i], arr[idx]);
//             idx++;
//         }
//     }
//     int ans = 0;
//     for (int i = 0; i < n; i++) {
//         for (int j = i + 1; j < n; j++) {
//             if (__gcd(arr[i], 2 * arr[j]) > 1) {
//                 ans++;
//             }
//         }
//     }
//     return ans;
// }


// void simpleSieve(int limit, vector<int> &prime)
// {
//     // Create a boolean array "mark[0..n-1]" and initialize
//     // all entries of it as true. A value in mark[p] will
//     // finally be false if 'p' is Not a prime, else true.
//     vector<bool> mark(limit + 1, true);

//     for (int p = 2; p * p < limit; p++)
//     {
//         // If p is not changed, then it is a prime
//         if (mark[p] == true)
//         {
//             // Update all multiples of p
//             for (int i = p * p; i < limit; i += p)
//                 mark[i] = false;
//         }
//     }

//     // Print all prime numbers and store them in prime
//     for (int p = 2; p < limit; p++)
//     {
//         if (mark[p] == true)
//         {
//             prime.push_back(p);
//             cout << p << " ";
//         }
//     }
// }


int check_substring(string s1, string s2) {
    int M = s1.length();
    int N = s2.length();
    for (int i = 0; i <= N - M; i++) {
        int j;
        for (j = 0; j < M; j++)
            if (s2[i + j] != s1[j])
                break;

        if (j == M)
            return i;
    }

    return -1;
}

// void solve() {
//     int n;
//     cin >> n;
//     string s;
//     cin >> s;
//     int three = 0, five = 0;
//     string ans = "";
//     bool ok = false;
//     for (int i = 1; i <= 1000; i++) {
//         if (i % 3 == 0) {
//             ans += "F";
//         }
//         if (i % 5 == 0) {
//             ans += "B";
//         }
//     }
//     for (int i = 0; i <= ans.size() - n; i++) {
//         if (check_substring(ans.substr(i, i + s.size()), s)) {
//             ok = true;
//             break;
//         }
//     }
//     if (ok) {
//         cout << "YES" << endl;
//         return;
//     }
//     cout << "NO" << endl;
// }


string get_lacs(string X, string Y, int m, int n)
{
    int LCSuff[m + 1][n + 1];

    // To store length of the longest common substring
    int len = 0;

    // To store the index of the cell which contains the
    // maximum value. This cell's index helps in building
    // up the longest common substring from right to left.
    int row, col;

    /* Following steps build LCSuff[m+1][n+1] in bottom
       up fashion. */
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                LCSuff[i][j] = 0;

            else if (X[i - 1] == Y[j - 1]) {
                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1;
                if (len < LCSuff[i][j]) {
                    len = LCSuff[i][j];
                    row = i;
                    col = j;
                }
            }
            else
                LCSuff[i][j] = 0;
        }
    }

    // if true, then no common substring exists
    if (len == 0) {
        // cout << "No Common Substring";
        return "";
    }

    // allocate space for the longest common substring
    char* resultStr = (char*)malloc((len + 1) * sizeof(char));

    // traverse up diagonally form the (row, col) cell
    // until LCSuff[row][col] != 0
    while (LCSuff[row][col] != 0) {
        resultStr[--len] = X[row - 1]; // or Y[col-1]

        // move diagonally up to previous cell
        row--;
        col--;
    }

    // required longest common substring
    return resultStr;
}

int find_ans(int l, int r) {
    return (log2(r / l) + 1);
}

void findLargest(vector<int> &arr, int n)
{
    // We first sort the array so that all divisors
    // of a number are before it.
    sort(arr.begin(), arr.end());

    // To store count of divisors of all elements
    vector <int> divCount(n, 1);

    // To store previous divisor in result
    vector <int> prev(n, -1);

    // To store index of largest element in maximum
    // size subset
    int max_ind = 0;

    // In i'th iteration, we find length of chain
    // ending with arr[i]
    for (int i = 1; i < n; i++)
    {
        // Consider every smaller element as previous
        // element.
        for (int j = 0; j < i; j++)
        {
            if (arr[i] % arr[j] == 0)
            {
                if (divCount[i] < divCount[j] + 1)
                {
                    divCount[i] = divCount[j] + 1;
                    prev[i] = j;
                }
            }
        }

        // Update last index of largest subset if size
        // of current subset is more.
        if (divCount[max_ind] < divCount[i])
            max_ind = i;
    }

    // Print result
    int k = max_ind;
    while (k >= 0)
    {
        cout << arr[k] << " ";
        k = prev[k];
    }
}



vector<int> least_prime_factor(int n)
{
    vector<int> least_prime(n + 1, 0);
    least_prime[1] = 1;
    for (int i = 2; i <= n; i++)
    {
        if (least_prime[i] == 0)
        {
            least_prime[i] = i;
            for (int j = i * i; j <= n; j += i)
                if (least_prime[j] == 0)
                    least_prime[j] = i;
        }
    }
    return least_prime;
}

vector<int> get_div(int n)
{
    vector<int> v;
    // Note that this loop runs till square root
    for (int i = 1; i <= sqrt(n); i++)
    {
        if (n % i == 0)
        {
            // If divisors are equal, print only one
            if (n / i == i)
                v.push_back(i);

            else // Otherwise print both
                v.push_back(i);
            v.push_back(n / i);
        }
    }
    return v;
}


long long lcm(int a, int b)
{
    return (a / __gcd(a, b)) * b;
}

void solve() {
    rd(n);
    int cnt = 0;
    while (n--) {
        rd(a);
        rd(b);
        if (a > b) {
            cnt++;
        }
    }
    cout << cnt << endl;
}

signed main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
#endif
    fastio;
    int t = 1;
    cin >> t;
    for (int i = 1; i <= t; i++)
    {
        // cout << "Case #" << i << ": ";
        solve();
    }
}
