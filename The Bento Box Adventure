#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
using ll = long long;
#define oset tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
#define maxll INT64_MAX
#define minll INT64_MIN
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define all(v) v.begin(), v.end()
#define per(i, a, b) for (ll i = a; i >= b; i--)

vector<ll> adj[1000000];

class DS {
public:
    vector<ll> par, size;
    DS(ll n) {
        par.resize(n);
        size.resize(n, 0);
        rep(j, 0, n) {
            par[j] = j;
            size[j] = 1;
        }
    }
    ll find(ll n) {
        if (par[n] == n)
            return n;
        return par[n] = find(par[n]);
    }
    void uni(ll a, ll b) {
        a = find(a);
        b = find(b);
        if (a != b) {
            if (size[a] < size[b])
                swap(a, b);
            par[b] = a;
            size[a] += size[b];
        }
    }
};

string bin(ll n) {
    string r;
    while (n != 0) {
        r = (n % 2 == 0 ? "0" : "1") + r;
        n /= 2;
    }
    return r;
}

void inline yes() {
    cout << "YES" << endl;
}

void inline no() {
    cout << "NO" << endl;
}

vector<bool> sieve(ll N) {
    vector<bool> is_prime(N + 1, 1);
    is_prime[0] = is_prime[1] = 0;
    for (ll i = 2; i * i <= N; i++) {
        if (is_prime[i]) {
            for (ll j = i * i; j <= N; j += i) {
                is_prime[j] = 0;
            }
        }
    }
    return is_prime;
}

ll gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

ll lcm(ll a, ll b) {
    return (a * b) / gcd(a, b);
}

vector<ll> prime_fact(ll res) {
    vector<ll> fact;
    while (res % 2 == 0) {
        fact.push_back(2);
        res /= 2;
    }
    for (int i = 3; i <= sqrt(res); i += 2) {
        while (res % i == 0) {
            fact.push_back(i);
            res /= i;
        }
    }
    if (res > 2)
        fact.push_back(res);
    return fact;
}

ll digsum(ll n) {
    ll s = 0;
    while (n > 0) {
        ll d = n % 10;
        s += d;
        n /= 10;
    }
    return s;
}

ll binpw(ll a, ll b, ll m) {
    ll res = 1;
    while (b > 0) {
        if (b % 2 == 1) {
            res = (res * a) % m;
        }
        a = (a * a) % m;
        b /= 2;
    }
    return res;
}

ll mod_inv(ll a, ll m) {
    return binpw(a, m - 2, m);
}

ll nCr(ll n, ll r, ll m) {
    if (r > n) return 0;
    if (r == 0) return 1;
    
    ll fac[n + 1];
    ll invfac[n + 1];

    fac[0] = 1;
    for (ll i = 1; i <= n; i++) {
        fac[i] = (fac[i - 1] * i) % m;
    }

    invfac[n] = mod_inv(fac[n], m);

    for (ll i = n - 1; i >= 0; i--) {
        invfac[i] = (invfac[i + 1] * (i + 1)) % m;
    }

    return (fac[n] * invfac[r] % m * invfac[n - r] % m) % m;
}

ll fact(ll n, ll m) {
    ll res = 1;
    for (ll i = 1; i <= n; i++) {
        res = (res * i) % m;
    }
    return res;
}

ll dfs(ll n, vector<bool>& vis, vector<ll>& ans) {
    vis[n] = 1;
    bool g = 0;
    for (auto i : adj[n]) {
        if (!vis[i]) {
            if (dfs(i, vis, ans) == 1) {
                g = 1;
                ans[n]++;
            }
        }
    }
    if (!g) return 1;
    return 0;
}

vector<ll> calculatePrefixSum(const vector<ll>& v) {
    vector<ll> ans(v.size());
    ans[0] = v[0];
    for (size_t i = 1; i < v.size(); ++i) {
        ans[i] = ans[i - 1] + v[i];
    }
    return ans;
}

ll largestSubarrayWithSumK(const vector<ll>& arr, ll n, ll k) {
    unordered_map<ll, ll> prefixSumMap;
    ll prefix_sum = 0;
    ll max_len = 0;

    for (ll i = 0; i < n; i++) {
        prefix_sum += arr[i];

        if (prefix_sum == k) {
            max_len = i + 1;
        }

        if (prefixSumMap.find(prefix_sum - k) != prefixSumMap.end()) {
            max_len = max(max_len, i - prefixSumMap[prefix_sum - k]);
        }

        if (prefixSumMap.find(prefix_sum) == prefixSumMap.end()) {
            prefixSumMap[prefix_sum] = i;
        }
    }

    return max_len;
}

ll binary_search(vector<ll>& arr, ll n, ll x) {
    ll l = 0;
    ll r = n - 1;
    while (l <= r) {
        ll mid = l + (r - l) / 2;
        if (arr[mid] == x) {
            return mid;
        } else if (arr[mid] < x) {
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
    return -1;
}

int modified_bin_search(const vector<ll>& v, ll right, ll shift_count, ll n) {
    ll left = 0;
    ll mid;
    ll target_value;
    
    while (left <= right) {
        mid = left + (right - left) / 2;
        target_value = n - mid - shift_count;
        
        if (v[mid] < target_value) {
            left = mid + 1;
        } else if (v[mid] == target_value) {
            return mid;
        } else {
            right = mid - 1;
        }
    }
    return left;
}

ll anso(map<ll, ll>& mp, ll ans, ll k) {
    ll sum = 0;
    vector<pair<ll, ll>> v;
    for (auto i : mp) {
        v.push_back({i.second, i.first});
    }
    sort(all(v), greater<pair<ll, ll>>());
    rep(i, 0, k) {
        sum += v[i].first;
    }
    return max(sum, ans);
}


// Binary search to find the index of the largest element smaller than nedif
ll binary_search_type(const vector<pair<ll, ll>>& v, ll n, ll nedif) {
    ll l = 0;
    ll r = n - 1;
    ll best_idx = -1; // To keep track of the best index found

    while (l <= r) {
        ll mid = l + (r - l) / 2;
        if (v[mid].first < nedif) {
            best_idx = mid; // Update the best index found
            l = mid + 1; // Move to the right half
        } else {
            r = mid - 1; // Move to the left half
        }
    }
    
    return (best_idx != -1) ? v[best_idx].second : -1; // Return the second value of the pair (the original index)
}





ll minOperationsToFormTriangle(ll n, vector<ll>& arr) {
   
    sort(arr.begin(), arr.end());

    ll max_valid_length = 2;  
    ll ans=0;
    ll j=n-1;
   
    per(i,n-2,1) {
        if (arr[i - 1] + arr[i] <= arr[j]) {
            max_valid_length = j-i+1;
            ans=max(max_valid_length,ans);
           
            j--;
        
        }
    }
    max_valid_length = j+1;
    ans=max(max_valid_length,ans);

  
    return n - ans;
}


vector<long long> solve(vector<tuple<long long, long long, long long>> &test_cases) {
    vector<long long> results;
    for (const auto &[n, b, c] : test_cases) {
        if (c > n - 1) {
            // Case 1: c > n-1, need n operations
            results.push_back(n);
        } else {
            // Case 2: c <= n-1
            if (b == 0 && c == 0 && n > 2) {
                // If both b and c are zero and n > 1, impossible to form permutation
                results.push_back(-1);
            } else if (b == 0) {
                // If only b is zero, then it takes n - 1 operations
                if(c>=n-2){
                results.push_back(n - 1);}
                else{
                    results.push_back(-1);
                }
            } else {
                // General case, use the formula
                long long operations = n - 1 - (n - 1 - c) / b;
                results.push_back(operations);
            }
        }
    }
    return results;
}
 
int main() {
    // int t; 
    // cin>>t;
    // while(t--){
       
      
       
    // }
    vector<ll>v(4);
    rep(i,0,4){
        cin>>v[i];
    }
    sort(all(v));
    bool flag=0;
    rep(i,1,5){
        if(v[i-1]!=i){
            cout<<i<<endl;
            flag=1;
            break;
        }
    }
    if(flag==0){
        cout<<5<<endl;
    }
    return 0;
}
