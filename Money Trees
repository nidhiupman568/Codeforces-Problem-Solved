#include <bits/stdc++.h>

#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("fast-math")
#pragma GCC optimize ("unroll-loops,Ofast,O3")
#pragma GCC target("avx,avx2,fma")

#define file(s) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)
#define deb(x) cerr << #x  << " = " << x << endl;
#define all(x) (x).begin(),(x).end()
#define int long long
#define ar array
#define rs(p) (p<<1|1)
#define ls(p) (p<<1)
#define pb push_back
#define endl '\n'
#define sz size()
#define F first
#define S second
#define SlimShady ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const long double eps = 1e-10;
const int MIN = LLONG_MIN;
const int M = 2e9 + 100;
const int N = 1e5 + 100;

void solve() {
	int n, k, ans = 0;
	cin >> n >> k;
	int a[n + 3], h[n + 2], pref[n +3]{}, suff[n + 3]{};
	for(int i = 1; i <= n; ++i) {
		cin >> a[i];
		pref[i] = a[i] + pref[i - 1];
	}
	for(int i = 1; i <= n; ++i) {
		cin >> h[i];
		suff[i] = suff[i - 1];
		if(h[i - 1] % h[i] == 0 && i > 1) suff[i]++;	
	}
	for(int i = 1; i <= n; ++i) {
		int l = i, r = n, res = i;
		while(l <= r) {
			int m = (l + r) / 2;
			if(suff[m] - suff[i] == (m - i) && pref[m] - pref[i - 1] <= k) {
				l = (res = m) + 1;
			} else {
				r = m - 1;
			}
		}
		if(a[i] <= k) ans = max(ans, res - i + 1);
	}
	cout << ans << endl;
}
signed main ()
{
	SlimShady
    int test = 1;
	cin >> test;
    while(test--) {
	    solve();
	}
}
