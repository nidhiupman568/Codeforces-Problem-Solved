#include<iostream>
#include<string.h>
#include<cmath>
#include<math.h>
#include<algorithm>
#include<list>
#include<bitset>
#include<array>
#include<stack>
#include<set>
#include<vector>
#include<map>
#include<queue>
#include<climits>
#include<numeric>

using namespace std;
#define mod  1000000007
#define mod1 998244353

#define sz(c)   c.size()
#define ll     int64_t
#define fr(i,n)    for(ll i=0;i<n;i++)
#define frs(i,s,n)    for(ll i=s;i<n;i++)
#define int64     int64_t

unsigned long long power(unsigned long long x,
                                  int y, int p)
{
    unsigned long long res = 1; 
 
    x = x % p;
    while (y > 0)
    {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1; 
        x = (x * x) % p;
    }
    return res;
}
 
unsigned long long modInverse(unsigned long long n, int p)
{
    return power(n, p - 2, p);
}
 
unsigned long long nCr(unsigned long long n,
                                 int r, int p)
{
    if (n < r)
        return 0;
    if (r == 0)
        return 1;
    unsigned long long fac[n + 1];
    fac[0] = 1;
    for (int i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
 
    return (fac[n] * modInverse(fac[r], p) % p
            * modInverse(fac[n - r], p) % p)
           % p;
}

bool compareInterval(const vector< ll> &v1,const vector< ll> &v2) 
{
    if(v1[1]==v2[1])
    {
        return v1[2]<v2[2];
    }
    return v1[1]<v2[1];
}

long long gcd(long long int a, long long int b)
{
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

long long lcm(ll a, ll b)
{
    return (a / gcd(a, b)) * b;
}

int modFact(ll n)
{
    if (n >= mod)
        return 0;
 
    ll result = 1;
    for (int i = 1; i <= n; i++)
        result = (result * i) % mod;
 
    return result;
}

int countFact(int n, int p)
{
    int k=0;
    while(n>0)
    {
        k+=n/p;
        n/=p;
    }
    return k;
}

bool isVowel(char a)
{
    string vowel="aeiou";
    for(auto i:vowel)
    {
        if(a==i) return true;
    }
    return false;
}

int solasdfution(int i,int n)
{
    if(i==n) 
    {
        return 0;
    }
    return 1;
}

int search(vector<int> &prefix1,vector<pair<int,int> > &prefix2,int r,int money)
{
    int l=0;
    int index=-1;
    while(l<=r)
    {
        int mid=(r+l)/2;
        int new_mid=-1;
        for(int i=0;i<prefix2.size();i++)
        {
            if(prefix2[i].second<=mid)
            {
                new_mid=i;
            }
            else
            {
                break;
            }
        }
        if(new_mid==-1)
        {
            if((prefix1[mid])<=money)
            {
                index=mid;
                l=mid+1;
            }
            else
            {
                r=mid-1;
            }
        }
        else
        {
            if((prefix1[mid]-prefix2[new_mid].first)<=money)
            {
                index=mid-new_mid-1;
                l=mid+1;
            }
            else
            {
                r=mid-1;
            }
        }
    }
    return index;
}
bool entered(vector<bool> &a,int i)
{
    return !a[i];
}
void present(vector<bool> &a,int i)
{
    a[i]=true;
    return;
}
void notPresent(vector<bool> &a,int i)
{
    a[i]=false;
    return;
}
int getInd(vector<int> &a,int i)
{
    int l=0;
    int r=a.size()-1;
    int index=-1;
    while(l<=r)
    {
        int mid=(l+r)/2;
        if(a[mid]<=i)
        {
            index=mid;
            l=mid+1;
        }
        else
        {
            r=mid-1;
        }
    }
    return index;
}

int getFactor(int n)
{
    for(int i=2;i<=sqrt(n);i++)
    {
        if(n%i==0)
        {
            if(gcd(i,n-i)!=1)
            {
                return i;
            }
        }
    }
    return -1;
}
// int gcd(int a,int b)
// {
//     if(b==0) return a;
//     return gcd(b,a%b);
// }


int getSum(int n)
{
    int sum=0;
    while(n>0)
    {
        sum+=n%10;
        n/=10;
    }
    return sum;
}
void build(vector<int> &segTree,string &s,int l,int r,int ind,vector<ll> &segTree_1,vector<ll> &a)
{
    if(l==r)
    {
        segTree[ind]=s[l]-'0';
        segTree_1[ind]=(ll)segTree[ind]*a[l];
        return;
    }
    int mid=(l+r)/2;
    build(segTree,s,l,mid,2*ind+1,segTree_1,a);
    build(segTree,s,mid+1,r,2*ind+2,segTree_1,a);
    segTree[ind]=segTree[2*ind+1]+segTree[2*ind+2];
    segTree_1[ind]=segTree_1[2*ind+1]^segTree_1[2*ind+2];
    return;
}

void update(vector<int> &segTree,int l,int r,int start,int end,int ind,vector<ll> &segTree_1,vector<ll> &a)
{
    if(l>end || r<start) return;
    if(l==r)
    {
        segTree[ind]=1-segTree[ind];
        segTree_1[ind]=(ll)segTree[ind]*a[l];
        return;
    }
    int mid=(l+r)/2;
    update(segTree,l,mid,start,end,2*ind+1,segTree_1,a);
    update(segTree,mid+1,r,start,end,2*ind+2,segTree_1,a);
    segTree[ind]=segTree[2*ind+1]+segTree[2*ind+2];
    segTree_1[ind]=segTree_1[2*ind+1]^segTree_1[2*ind+2];
    return;
}

ll query(vector<int> &segTree,int l,int r,int start,int end,int ind,vector<ll> &segTree_1,vector<ll> &a)
{
    if(l>end || r<start) return 0;
    if(l>=start && r<=end)
    {
        return segTree_1[ind];
    }
    int mid=(l+r)/2;
    ll left=query(segTree,l,mid,start,end,2*ind+1,segTree_1,a);
    ll right=query(segTree,mid+1,r,start,end,2*ind+2,segTree_1,a);
    return left^right;
}

bool isPrime(int n)
{
    if(n==1) return false;
    for(int i=2;i<=sqrt(n);i++)
    {
        if(n%i==0) return false;
    }
    return true;
}

int getPrimes(int n,vector<bool> &prime)
{
    for(int i=2;i<=n/2;i++)
    {
        if(prime[i] && prime[n-i])
        {
            return i;
        }
    }
    return -1;
}



void dfs(int v,int p,vector<int> &s,vector<vector<int> > &g,vector<int>& subtree)
{
    if(s[v]==0)return;
    for(auto i:g[v])
    {
        if(i!=p)
        {
            dfs(i,v,s,g,subtree);
            subtree[v]+=subtree[i];
        }
    }
}



vector<ll> getFactors(ll n)
{
    vector<ll> factors;
    for(ll i=1;i<=sqrt(n);i++)
    {
        if(n%i==0)
        {
            factors.push_back(i);
            if(i!=sqrt(n))
            {
                factors.push_back(n/i);
            }
        }
    }
    return factors;
}



bool check(int i,int j,int x,int y,int a,int b)
{
    if((i+a)==x && (j+b)==y) return true;
    if((i-a)==x && (j+b)==y) return true;
    if((i+a)==x && (j-b)==y) return true;
    if((i-a)==x && (j-b)==y) return true;
    if((i+b)==x && (j+a)==y) return true;
    if((i-b)==x && (j+a)==y) return true;
    if((i+b)==x && (j-a)==y) return true;
    if((i-b)==x && (j-a)==y) return true;

    return false;
}



int64 getClosest(int64 val1, int64 val2,
               int64 target)
{
    if (target - val1 >= val2 - target)
        return val2;
    else
        return val1;
}



int64 findClosest(vector<int64> arr, ll n, int64 target)
{
    if (target <= arr[0])
        return arr[0];
    if (target >= arr[n - 1])
        return arr[n - 1];
 
    ll i = 0, j = n, mid = 0;
    while (i < j) {
        mid = (i + j) / 2;
 
        if (arr[mid] == target)
            return arr[mid];
 
        if (target < arr[mid]) {
 
            if (mid > 0 && target > arr[mid - 1])
                return getClosest(arr[mid - 1],
                                  arr[mid], target);
 
            j = mid;
        }
 
        else {
            if (mid < n - 1 && target < arr[mid + 1])
                return getClosest(arr[mid],
                                  arr[mid + 1], target);
            i = mid + 1; 
        }
    }
 
    return arr[mid];
}
bool palindrome(vector<int> &a)
{
    int n=a.size();
    for(int i=0;i<n/2;i++)
    {
        if(a[i]!=a[n-i-1]) return false;
    }
    return true;
}

int getSmaller(vector<ll> &v,int i,ll target)
{
    int l=i+1;
    int r=v.size()-1;
    int index=-1;
    while(l<=r)
    {
        int mid=(l+r)/2;
        if(v[mid]<target)
        {
            index=mid;
            l=mid+1;
        }
        else
        {
            r=mid-1;
        }
    }
    return index;
}
void solve1(vector<string> &v, int n,int b,int c,int x,string s)
{
    if(s.size()==n)
    {
        v.push_back(s);
        return;
    }
    if(b>0)
    {
        solve1(v,n,b-1,c,x,s+"B");
    }
    if(c>0)
    {
        solve1(v,n,b,c-1,x,s+"C");
    }
    if(x>0)
    {
        solve1(v,n,b,c,x-1,s+"X");
    }
    return;
}

bool checkV(vector<ll> v)
{
    for(auto i:v)
    {
        if(i<=0)return false;
    }
    return true;
}

bool nextt(string a,string b,int ind)
{
    ll aa=0,bb=0;
    b[ind]='1';
    if(a[ind]=='1')a[ind]='0';
    else a[ind]='1';
    for(int i=1;i<64;i++)
    {
        if(a[i]=='1')
        {
            aa+=(1ll<<(63-i));
        }
         if(b[i]=='1')
        {
            bb+=(1ll<<(63-i));
        }
    }
    
    return aa>=bb;

}

ll pow2(ll a, ll b, ll n)
{
    ll x=1,y=a;
    while (b > 0) {
        if (b%2 == 1) {
            x = (x*y) % n; 
        }
        y = (y*y) % n; 
        b /= 2;
    }
    return x % n;
}
 bool justsmaller(vector<ll> &v,ll a,ll b)
 {
    for(int i=1;i<v.size();i++)
    {
        if(v[i]==b && v[i-1]==a)
        {
            return true;
        }
    }
    return false;
 }


ll binarysmaller(vector<ll> & v,ll ind, ll target)
{
    ll l=ind;
    ll r=v.size()-1;
    ll index=ind;
    while(l<=r)
    {
        ll mid=l+(r-l)/2;
       if(v[mid]<=target)
        {
            index=mid;
            l=mid+1;
        }
        else
        {
            r=mid-1;
        }
    }
    return index;
}

struct Node
{
    int data;
    vector<Node*> children;
};



Node* createNode(int data)
{
    Node* newNode = new Node();
    newNode->data = data;
    return newNode;
}

Node* createTree(map<ll,vector<ll> > &mp)
{
    Node* root = NULL;
    map<ll,Node*> created;
    for(auto i:mp)
    {
        ll id=i.first;
        if(created.find(id)==created.end())
        {
            root=createNode(id);
            created[id]=root;
        }
        for(auto j:i.second)
        {
            if(created.find(j)==created.end())
            {
                Node* child=createNode(j);
                created[j]=child;
            }
            created[id]->children.push_back(created[j]);
        }
    }
    return root;
}



int solution(string s,int &ind,int sum)
{
    if(ind==s.size() || s[ind]==')')return sum;
    stack<int> st;
    while(ind<s.size() && s[ind]!=')')
    {
        if(st.empty())
        {
            while((s[ind]-'0')>=0 && (s[ind]-'0')<=9)
            {
                sum=sum*10+(s[ind]-'0');
                ind++;
            }
            st.push(sum);
        }
        else
        if((s[ind]-'0')>=0 && (s[ind]-'0')<=9)
        {
            int k=0;
            while((s[ind]-'0')>=0 && (s[ind]-'0')<=9)
            {
                k=k*10+(s[ind]-'0');
                ind++;
            }
            st.push(k);
        }
        if(s[ind]=='(')
        {
            ind++;
            int temp=solution(s,ind,0);
            st.push(temp);
            ind++;
        }
        if(s[ind]=='+')
        {
            int k=st.top();
            st.pop();
            ind++;
            int tempp=0;
            while((s[ind]-'0')>=0 && (s[ind]-'0')<=9)
            {
                tempp=tempp*10+(s[ind]-'0');
                ind++;
            }
            st.push(k+tempp); 
        }
        else if(s[ind]=='*')
        {
            int k=st.top();
            st.pop();
            ind++;
            int tempp=0;
            while((s[ind]-'0')>=0 && (s[ind]-'0')<=9)
            {
                tempp=tempp*10+(s[ind]-'0');
                ind++;
            }
            st.push(k*tempp); 
        }
        else if(s[ind]=='-')
        {
            int k=st.top();
            st.pop();
            ind++;
            int tempp=0;
            while((s[ind]-'0')>=0 && (s[ind]-'0')<=9)
            {
                tempp=tempp*10+(s[ind]-'0');
                ind++;
            }
            st.push(k-tempp);
        }
        else if(s[ind]=='/')
        {
            int k=st.top();
            st.pop();
            ind++;
            int tempp=0;
            while((s[ind]-'0')>=0 && (s[ind]-'0')<=9)
            {
                tempp=tempp*10+(s[ind]-'0');
                ind++;
            }
            st.push(k/tempp);
        }
        cout<<st.top()<<endl;
    }
    return sum=st.top();

}

void solve(){
    string s;
    cin>>s;
    for(int i=1;i<s.size();i++)
    {
        if(s[i-1]=='i' && s[i]=='t')
        {
            cout<<"YES"<<endl;
            return;
        }
    }
    cout<<"NO"<<endl;
    
    return;

}
int main(){
    int t=1;
    cin>>t;
    while(t--)solve();
    return 0;
}
