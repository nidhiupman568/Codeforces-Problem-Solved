#include <bits/stdc++.h>

using namespace std;
#define int long long int
#define ff float 
#define dd double
#define uu unsigned long long int
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define flash ios_base::sync_with_stdio(0);cin.tie(0);


void init_code(){
#ifndef ONLINE_JUDGE    
freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
}

// Notes:

// 1. for divisors you can preprocess (Easy number challenge CF).
void yes(){
    cout<<"YES"<<endl;
}
void no(){
    cout<<"NO"<<endl;
}
int gcd(int a, int b)
{
    // Everything divides 0
    if (a == 0)
       return b;
    if (b == 0)
       return a;
  
    // base case
    if (a == b)
        return a;
  
    // a is greater
    if (a > b)
        return gcd(a-b, b);
    return gcd(a, b-a);
}

long long calculate(long long p,
                    long long q)
{
    long long mod = 998244353, expo;
    expo = mod - 2;
 
    // Loop to find the value
    // until the expo is not zero
    while (expo) {
 
        // Multiply p with q
        // if expo is odd
        if (expo & 1) {
            p = (p * q) % mod;
        }
        q = (q * q) % mod;
 
        // Reduce the value of
        // expo by 2
        expo >>= 1;
    }
    return p;
}

int power(int a, int b, int MOD){int ans=1; while(b){if(b&1)ans = (ans*a)%MOD;a = (a*a)%MOD;b>>=1;} return ans;}
int power1(int a, int b){int ans=1; while(b){if(b&1)ans = (ans*a);a = (a*a);b>>=1;} return ans;}
int phin(int n) {int number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0)n /= 2;} for (int i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))
int expo(int a, int b, int mod) {int res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
int mminvprime(int a, int b) {return expo(a, b - 2, b);}
int mod_add(int a, int b, int m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
int mod_mul(int a, int b, int m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
int mod_sub(int a, int b, int m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
int mod_div(int a, int b, int m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m
int dx[] = {1,0,-1,0,1,-1,1,-1};
int dy[] = {0,1,0,-1,1,1,-1,-1};
// 0. Count divisors
map<pair<int,int>,int>m;
vector<int> primeFactors(int n)
{
    // Print the number of 2s that divide n
    vector<int>v;
    while (n % 2 == 0)
    {
        // cout << 2 << " ";
        v.push_back(2);
        n = n/2;
    }
 
    // n must be odd at this point. So we can skip
    // one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i + 2)
    {
        // While i divides n, print i and divide n
        while (n % i == 0)
        {
            // cout << i << " ";
            v.push_back(i);
            n = n/i;
        }
    }
 
    // This condition is to handle the case when n
    // is a prime number greater than 2
    if (n > 2)
        v.push_back(n);
        // cout << n << " ";
    
    return v;
}

bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)
        return false;
    if (n <= 3)
        return true;
  
    // This is checked so that we can skip
    // middle five numbers in below loop
    if (n % 2 == 0 || n % 3 == 0)
        return false;
  
    for (int i = 5; i * i <= n; i = i + 6)
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
  
    return true;
}

void dijkstra(){
    int N,m;
    cin >> N >> m;
    vector<pair<int,int> > adj[N];
    int a,b,wt;
    for(int i = 0; i<m ; i++){
        cin >> a >> b >> wt;
        adj[a].push_back(make_pair(b,wt));
        adj[b].push_back(make_pair(a,wt));
    }
    int s;
    cin>>s;
    vector<int>dist(N,INT_MAX);
    dist[s]=0;
    vector<bool>dset(N,false);
    dset[s]=true;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    pq.push({0,s});
    while(pq.size()!=0){
        int u=pq.top().first;
        int v=pq.top().second;
        pq.pop();
        dset[v]=true;
        for(auto i:adj[v]){
            int w=i.second;
            int t=i.first;
            if(dset[t]==false && dist[t]> u+w){
                dist[t]=u+w;
                pq.push({dist[t],t});
            }
        }
    }
    for(int i=0;i<N;i++){
        cout<<dist[i]<<" ";
    }
    cout<<endl;
}
int Prim_MST(){
    int N,m;
    cin >> N >> m;
    vector<pair<int,int> > adj[N]; 

    int a,b,wt;
    int mst_path_sum=0;
    for(int i = 0; i<m ; i++){
        cin >> a >> b >> wt;
        adj[a].push_back(make_pair(b,wt));
        adj[b].push_back(make_pair(a,wt));
    }   
    
    int parent[N];
    int key[N];
    bool mstSet[N];
    for (int i = 0; i < N; i++)
        key[i] = INT_MAX, mstSet[i] = false;
    priority_queue< pair<int,int>, vector <pair<int,int>> , greater<pair<int,int>> > pq; 
    key[0] = 0; 
    parent[0] = -1; 
    pq.push({0, 0});
    while(!pq.empty())
    { 
        int w = pq.top().first;
        int u = pq.top().second; 
        pq.pop(); 
        if(mstSet[u]==true){
            continue;
        }
        mst_path_sum+=w;
        mstSet[u] = true;
        for (auto it : adj[u]) {
            int v = it.first;
            int weight = it.second;
            if (mstSet[v] == false && weight < key[v]) {
                parent[v] = u;
                key[v] = weight; 
                pq.push({key[v], v});    
            }
        }      
    } 
    // for (int i = 1; i < N; i++) 
    //     cout << parent[i] << " - " << i <<" \n"; 
    return mst_path_sum  ;
}

int printNcR(int n, int r)
{
    // p holds the value of n*(n-1)*(n-2)...,
    // k holds the value of r*(r-1)...
    int p = 1, k = 1;
 
    // C(n, r) == C(n, n-r),
    // choosing the smaller value
    if (n - r < r)
        r = n - r;
 
    if (r != 0) {
        while (r) {
            p *= n;
            k *= r;
 
            // gcd of p, k
            int m = __gcd(p, k);
 
            // dividing by gcd, to simplify
            // product division by their gcd
            // saves from the overflow
            p /= m;
            k /= m;
 
            n--;
            r--;
        }
 
        // k should be simplified to 1
        // as C(n, r) is a natural number
        // (denominator should be 1 ) .
    }
 
    else
        p = 1;
 
    // if our approach is correct p = ans and k =1
    return p;
}

//  **********************************************************************************************************

 // Below is the sieve Algorithm 

vector<int> SieveOfEratosthenes(int n)
{
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    vector<int>a;
    for (int p = 2; p * p <= n; p++)
    {
        if (prime[p] == true)
        {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (prime[p])
            a.push_back(p);
    return a;
}

//  Given Below is the algorithm for checking whether there is pair in array whose gcd is not 1( >=2 ).
//  Constraints : n = 10^5 , a[i]<=10^9
//  Uses sieve above wala

// void solve(int t,vector<int>&prim){
//     int n;
//     cin>>n;
//     int arr[n];
//     set<int>c;
//     bool d = false;
//     for(int i=0;i<n;i++){
//         cin>>arr[i];
//         if(arr[i]==1){
//             continue;
//         }
//         if(c.find(arr[i])!=c.end()){
//             d=true;
//         }
//         c.insert(arr[i]);
//     }
//     if(d){
//         cout<<"YES"<<endl;
//         return ;
//     }
//     sort(arr,arr+n);
//     set<int>st;
//     for(int i=0;i<n;i++){
//         set<int>St;
//         for(int j=0;j<prim.size();j++){
//             if(prim[j]*prim[j] > arr[i]){
//                 break;
//             }
//             while(arr[i]> prim[j] && arr[i]%prim[j] == 0){
//                 St.insert(prim[j]);
//                 arr[i]/= prim[j] ;
//             }
//         }
//         if(arr[i]!=1){
//             St.insert(arr[i]);
//         }
//         for(int j:St){
//             if(st.find(j)!=st.end()){
//                 cout<<"YES"<<endl;
//                 return ;
//             }
//             st.insert(j);
//         }
//     }
//     cout<<"NO"<<endl;
// }

//  **********************************************************************************************************

//  Given Below is the algorithm for finding spf and as well as below it can be used to find all prime factors.
//  Constraints : T (no.of.test.cases) = 10^6 , a[i] <= 10^7. 
//  Uses sieve above wala

// int MAXN = 10000005;
// int spf[MAXN];
 
// // Calculating SPF (Smallest Prime Factor) for every
// // number till MAXN.
// // Time Complexity : O(nloglogn)
// void sieve()
// {
//     spf[1] = 1;
//     for (int i=2; i<MAXN; i++)
//         spf[i] = i;

//     for (int i=4; i<MAXN; i+=2)
//         spf[i] = 2;
 
//     for (int i=3; i*i<MAXN; i++)
//     {
//         if (spf[i] == i)
//         {
//             for (int j=i*i; j<MAXN; j+=i)

//                 if (spf[j]==j)
//                     spf[j] = i;
//         }
//     }
// }

// //  Main driver code  to find all prime factors 

// set<int>st;
// while(d!=1){
//     st.insert(spf[d]);
//     d=d/spf[d];
// }



//  **********************************************************************************************************

// Segmented Sieve
// To understande constraints https://cp-algorithms.com/algebra/sieve-of-eratosthenes.html#segmented-sieve


// vector<char> segmentedSieve(long long L, long long R) {
//     // generate all primes up to sqrt(R)
//     long long lim = sqrt(R);
//     vector<char> mark(lim + 1, false);
//     vector<long long> primes;
//     for (long long i = 2; i <= lim; ++i) {
//         if (!mark[i]) {
//             primes.emplace_back(i);
//             for (long long j = i * i; j <= lim; j += i)
//                 mark[j] = true;
//         }
//     }

//     vector<char> isPrime(R - L + 1, true);
//     for (long long i : primes)
//         for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)
//             isPrime[j - L] = false;
//     if (L == 1)
//         isPrime[0] = false;
//     return isPrime;
// }

//  **********************************************************************************************************

//   Union Find DSU with full compression optimization

// class DisjointSet {
//     vector<int> rank, parent; 
// public: 
//     DisjointSet(int n) {
//         rank.resize(n+1, 0); 
//         parent.resize(n+1);
//         for(int i = 0;i<=n;i++) {
//             parent[i] = i;
//         }
//     }

//     int findUPar(int node) {
//         if(node == parent[node])
//             return node; 
//         return parent[node] = findUPar(parent[node]); 
//     }

//     void unionByRank(int u, int v) {
//         int ulp_u = findUPar(u); 
//         int ulp_v = findUPar(v); 
//         if(ulp_u == ulp_v) return; 
//         if(rank[ulp_u] < rank[ulp_v]) {
//             parent[ulp_u] = ulp_v; 
//         }
//         else if(rank[ulp_v] < rank[ulp_u]) {
//             parent[ulp_v] = ulp_u; 
//         }
//         else {
//             parent[ulp_v] = ulp_u; 
//             rank[ulp_u]++; 
//         }
//     }
// }; 

// ***********************************************************************************************
// Segment Tree
class SGTree {
	vector<int> seg;
public:
	SGTree(int n) {
		seg.resize(4 * n + 1);
	}

	void build(int ind, int low, int high, int arr[]) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}

		int mid = (low + high) / 2;
		build(2 * ind + 1, low, mid, arr);
		build(2 * ind + 2, mid + 1, high, arr);
		seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}

	int query(int ind, int low, int high, int l, int r) {
		// no overlap
		// l r low high or low high l r
		if (r < low || high < l) return INT_MAX;

		// complete overlap
		// [l low high r]
		if (low >= l && high <= r) return seg[ind];

		int mid = (low + high) >> 1;
		int left = query(2 * ind + 1, low, mid, l, r);
		int right = query(2 * ind + 2, mid + 1, high, l, r);
		return min(left, right);
	}
	void update(int ind, int low, int high, int i, int val) {
		if (low == high) {
			seg[ind] = val;
			return;
		}

		int mid = (low + high) >> 1;
		if (i <= mid) update(2 * ind + 1, low, mid, i, val);
		else update(2 * ind + 2, mid + 1, high, i, val);
		seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}
};
// ***********************************************************************************************

// Articulation Points

// void dfs_articulate(vector<int>adj[],vector<bool>&vis,int s,int p,int disc,vector<int>&low){
//     vis[s]=true;
//     low[s]=disc;
//     int count=0;
//     for(int i:adj[s]){
//         if(vis[i]==false){
//             count++;
//             dfs_articulate(adj,vis,i,s,disc+1,low);
//             if(s!=0){
//                 if(disc <= low[i]){
//                     cout<<s<<" ";
//                 }
//                 low[s]=  min(low[s],low[i]);
//             }
//         }
//         else if(i!=p){
//             low[s]=min(low[s],low[i]);
//         }
//     }
//     if(s==0 && count>=2){
//         cout<<0<<" ";
//     }
// }

// void dfs_bridge(vector<int>adj[],vector<bool>&vis,int s,int p,int disc,vector<int>&low){
//     vis[s]=true;
//     low[s]=disc;
//     // int count=0;
//     for(int i:adj[s]){
//         if(vis[i]==false){
//             // count++;
//             dfs_articulate(adj,vis,i,s,disc+1,low);
//             if(disc < low[i]){
//                 cout<<s<<" "<<i<<endl;
//             }
//             low[s]=  min(low[s],low[i]);
            
//         }
//         else if(i!=p){
//             low[s]=min(low[s],low[i]);
//         }
//     }
// }

// void driver(){
//     vector<int>adj[n];
//     vector<int>low(n,INT_MAX);
//     vector<bool>vis(n,false);

//     for(int i=0;i<n;i++){
//         if(vis[i]==false){
//             dfs_articulate(adj,vis,i,-1,0,low);
//         }
//     }

//     for(int i=0;i<n;i++){
//         if(vis[i]==false){
//             dfs_bridge(adj,vis,i,-1,0,low);
//         }
//     }
// }

// ***********************************************************************************************

// LPS OR Algorithms for Competitive Programming
// Prefix function - Knuth-Morris-Pratt

void filllps(string s,vector<int>&lps){
    int n=s.size();
    int len=0;
    lps[0]=0;
    int i=1;
    while(i<n){
        if(s[len] == s[i]){
            lps[i] = len+1;
            len++;
            i++;
        }
        else{
            if(len == 0){
                lps[i]=0;
                i++;
            }
            else {
                len = lps[len-1];
            }
        }
    }
}


//  Problems solvable by lps->

// 1. String compression. (abcabcabc) - (abc)
// 2. Count number of different substrings of given string Can also be solved by using trie
// 3. Counting the number of occurrences of each prefix 

// ***********************************************************************************************

//   Manacher's algorithm ( to find substrings which are palindrome )

void manacher(vector<int>&lps,int n,string s){
    int l=1;
    int r=1;
    for(int i=1;i<n;i++){
        lps[i] = max((int)0,min(r-i,lps[l+r-i]));
        while(i+lps[i]<n && i-lps[i]>=0 && s[i+lps[i]]==s[i-lps[i]]){
            lps[i]++;
        }
        if(i+lps[i] > r){
            r=i+lps[i];
            l=i-lps[i];
        }
    }
    for(int i=0;i<n;i++){
        cout<<lps[i]<<" ";
    }
    cout<<endl;
}

void driver(string s){
    int n=s.size();
    string S="";
    S+='#';
    for(int i=0;i<n;i++){
        S+=s[i];
        S+='#';
    }
    n = 2*n+1;
    vector<int>lps(n,1);
    // Lets suppose the new string is -> #b#a#b#a#b#. So 
    // Lps[0] = 1;
    // Lps[1] = 2;
    // Lps[2]=1;
    // Lps[3] = 4; and so on. It denotes how much characters match from current to previous.
    manacher(lps,n,S);
    //  Length of longest palindrome of centre i is lps[i]-1.
}


// ***********************************************************************************************
// PBDS Indexed set

// #include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// using namespace __gnu_pbds;
// using namespace std;

// typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;
// #define int long long
// #define endl '\n'

// signed main(){
//     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
//     #ifdef LOCAL
//     freopen("input.txt", "r" , stdin);
//     freopen("output.txt", "w", stdout);
//     #endif
    
//     indexed_set s;
//     int n,k; cin>>n>>k;
//     for (int i = 1; i <= n; i++)
//         s.insert(i);

//     int ind = k%n;
//     while(n--) {
//         auto y = s.find_by_order(ind);
//          // s.find_by_order(k):Kth element in "s",s.order_of_key(k):Number of item strictly less than k
//         cout<<*y<<' ';
//         s.erase(y);
//         if (n) ind = (ind%n + k)%n;
//     }   
// }
// ***********************************************************************************************
// ***********************************************************************************************
//  Fermats Theorem for effectively calucating ncr.
vector<int>fac;
int p = 1e9 + 7;

void pre_compute(int n){
    fac.resize(n+1);
    fac[0] = 1;
    for (int i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
}

int ncr_efficient_pre_computation_required(int n,int r){
    int p = 1e9 + 7;
    if(r>n){
        return 0;
    }
    if(r==0){
        return 1;
    }
    // Call pre_compute in main function once only and then call this .
    return (fac[n] * mminvprime(fac[r], p) % p* mminvprime(fac[n - r], p) % p)% p;
    
}

// ***********************************************************************************************

void solve(int t){
    int n,k;
    cin>>n>>k;
    int a[n],b[n];
    vector<pair<int,int>>v;
    for(int i=0;i<n;i++){
        cin>>a[i];
        v.push_back({a[i],i});
    }
    for(int i=0;i<n;i++){
        cin>>b[i];
    }
    sort(b,b+n);sort(v.begin(),v.end());
    map<int,int>m;
    for(int i=0;i<n;i++){
        m[v[i].second] = b[i];
    }
    for(auto i:m){
        cout<<i.second<<" ";
    }
    cout<<endl;
}
int32_t main(){
    flash;
    int t;
    cin>>t;
    int T=1;
    // sieve();
    while(t--){
        solve(T);
        T++;
    }
    // solve(1);
    return 0;
}

// Tips:
// 1. for checking element in array in log(n) don't write full binary search use binary_search in stl.
// 2. for calculating lower_bound and upper_bound in vector.
// 3. using point 2 you can solve first occurence problem, last occurence problem. https://www.youtube.com/watch?v=edJ19qIL8WQ
