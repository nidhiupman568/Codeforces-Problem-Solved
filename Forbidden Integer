// LUOGU_RID: 113628538
#include <bits/stdc++.h>

using namespace std::ranges;
#ifndef LX_DEBUG
// #define LX_DEBUG
#endif

#undef LX_DEBUG

#define CHECK_EOF 0
#if CHECK_EOF
#define ECHK0 *ptr ? *ptr++ : -1
#define ECHK1     \
    if (ch == -1) \
        return set(false), *this;
#define ECHK2  \
    if (!*ptr) \
        return set(false), *this;
#define ECHK3 &&ch != -1
#define ECHK4 &&*ptr
#else
#define ECHK0 *ptr++
#define ECHK1
#define ECHK2
#define ECHK3
#define ECHK4
#endif

#if defined(__unix__) && !defined(LX_DEBUG) && !defined(LX_LOCAL)
#define USE_MMAP
#include <sys/mman.h>
#include <sys/stat.h>
#endif

#if CHECK_EOF || !defined(USE_MMAP)
#define EV (-1)
#else
#define EV 0
#endif

#define Vec std::vector
using u8 = unsigned char;
using u16 = unsigned short;
using u32 = unsigned int;
using u64 = unsigned long long;
using u128 = unsigned __int128;
using usize = std::size_t;
using i8 = signed char;
using i16 = short;
using i64 = long long;
using i128 = __int128;
using ld = long double;
using vi = Vec<int>;
using pi = std::pair<int, int>;

#ifdef LX_LOCAL
namespace {
    struct Timer {
        clock_t begin;
        Timer(): begin(clock()) {}
        ~Timer() {
            double t = (clock() - begin) * 1000. / CLOCKS_PER_SEC;
            fprintf(stderr, "\033[1;32m");
            if (t >= 60000)
                fprintf(stderr, "%.2lfmin\n", t / 60000.);
            else if (t >= 1000)
                fprintf(stderr, "%.2lfs\n", t / 1000.);
            else
                fprintf(stderr, "%.0lfms\n", t);
            fprintf(stderr, "\033[0m");
        }
    } _;
} // namespace
#endif

// NOLINTBEGIN
#define FOR1(a) for (std::decay_t<decltype(a)> _ = 0; _ < (a); _++)
#define FOR2(i, a) for (std::decay_t<decltype(a)> i = 0; i < (a); i++)
#define FOR3(i, a, b) for (auto i = a; i < (b); i++)
#define FOR4(i, a, b, c) for (auto i = a; i < (b); i += (c))
#define FOR1_R(a) for (auto i = (a)-1; i >= 0; i--)
#define FOR2_R(i, a) for (auto i = (a)-1; i >= 0; i--)
#define FOR3_R(i, a, b) for (auto i = (b)-1; i >= (a); i--)
#define overload4(a, b, c, d, e, ...) e
#define overload3(a, b, c, d, ...) d
#define _for(...) overload4(__VA_ARGS__, FOR4, FOR3, FOR2, FOR1)(__VA_ARGS__)
#define _for_r(...) overload3(__VA_ARGS__, FOR3_R, FOR2_R, FOR1_R)(__VA_ARGS__)
#define foreach(x, a) for (auto&& x: a)
#define loop while (true)
// NOLINTEND

template <typename T>
struct make_unsigned: public std::make_unsigned<T> {};
template <>
struct make_unsigned<i128> {
    using type = u128;
};
template <typename T>
concept tupleLike = requires { typename std::tuple_element_t<0, std::decay_t<T>>; } && !requires (T t) { t[0]; };
template <typename T>
concept Signed = std::signed_integral<T> || std::is_same_v<T, i128>;
template <typename T>
concept Unsigned = std::unsigned_integral<T> || std::is_same_v<T, u128>;

template <typename T, typename U>
constexpr auto ceil(T&& x, U&& y) { return x > 0 ? (x + y - 1) / y : x / y; }
template <typename T, typename U>
constexpr auto floor(T&& x, U&& y) { return x > 0 ? x / y : (x - y + 1) / y; }
template <typename T, typename U>
constexpr auto divmod(T&& x, U&& y) {
    auto&& q = floor(x, y);
    return std::pair{q, x - q * y};
}
constexpr u64 ten(int t) { return t == 0 ? 1 : ten(t - 1) * 10; }
template <typename T, typename... Args>
constexpr void chkmax(T& d, const Args&... x) { d = max(d, x...); }
template <typename T, typename... Args>
constexpr void chkmin(T& d, const Args&... x) { d = min(d, x...); }

template <forward_range R>
constexpr auto sum(R&& r) { return std::accumulate(begin(r), end(r), std::decay_t<decltype(*begin(r))>{}); }
template <forward_range R, typename T>
constexpr auto sum(R&& r, T init) { return std::accumulate(begin(r), end(r), init); }
constexpr int len(auto&& x) { return std::size(x); }

template <typename T>
auto psum(const Vec<T>& a) {
    int n = len(a);
    Vec<T> b(len(a) + 1);
    _for (i, n)
        b[i + 1] = b[i] + a[i];
    return b;
}
template <typename T>
auto psum(auto&& a) {
    int n = len(a);
    Vec<T> b(len(a) + 1);
    _for (i, n)
        b[i + 1] = b[i] + a[i];
    return b;
}

template <typename T, typename... Args>
auto vec(usize n, Args&&... s) {
    if constexpr (!sizeof...(s))
        return Vec<T>(n);
    else
        return Vec(n, vec<T>(s...));
}
template <typename... Args>
auto veci(usize n, Args&&... s) {
    if constexpr (sizeof...(s) == 1)
        return Vec(n, s...);
    else
        return Vec(n, veci(s...));
}

#define lc (o << 1)
#define rc (o << 1 | 1)
#define lowbit(x) ((x) & (-(x)))
#define all(x) std::begin(x), std::end(x)
#define rall(x) std::rbegin(x), std::rend(x)
#define LB(c, x) std::distance(std::begin(c), std::lower_bound(all(c), (x)))
#define UB(c, x) std::distance(std::begin(c), std::upper_bound(all(c), (x)))
#define UNIQUE(c) sort(c), (c).erase(std::unique(all(c)), std::end(c))
#define VEC(type, a, ...) auto a = vec<type>(__VA_ARGS__)
#define VECI(a, ...) auto a = veci(__VA_ARGS__)
#define dR(type, ...) \
    type __VA_ARGS__; \
    io.read(__VA_ARGS__)
#define dRV(type, a, ...)      \
    VEC(type, a, __VA_ARGS__); \
    io.read(a)

template <typename T>
vi argsort(Vec<T>& a) {
    vi p(len(a));
    std::iota(all(p), 0);
    sort(p, [&](int i, int j) { return std::pair{a[i], i} < std::pair{a[j], j}; });
    return p;
}

std::mt19937 mrand(std::random_device{}());
std::mt19937_64 mrand64(std::random_device{}());

constexpr usize bufSize = 1 << 20;

class IO;
class In {
    friend class IO;

private:
    FILE* inFile;
    bool status = true;
#ifdef USE_MMAP
    struct stat st;
    char* ptr;
    int fd;
#elif !defined(LX_DEBUG)
    char buf[bufSize], *p1, *p2;
#endif
    static constexpr bool isdigit(int c) { return '0' <= c && c <= '9'; }

public:
#ifdef LX_DEBUG
    int getch() { return fgetc_unlocked(inFile); }
    void input(FILE* f) { inFile = f, set(); }
#elif defined(USE_MMAP)
    int getch() { return ECHK0; }
    void input(FILE* f) {
        inFile = f;
        if (inFile)
            fd = fileno(inFile), fstat(fd, &st), ptr = (char*)mmap(nullptr, st.st_size, PROT_READ, MAP_PRIVATE, fd, 0), set();
    }
    static constexpr auto n = []() {
        std::array<u32, 0x10000> n{};
        fill(n, -1);
        constexpr u32 e0 = 0x01, e1 = 0x100;
        int x = 0;
        for (u32 i = 0, c0 = 0x3030; i != 10; i++, c0 += e0)
            for (u32 j = 0, c1 = c0; j != 10; j++, c1 += e1)
                n[c1] = x++;
        return n;
    }();
#else
    int getch() { return (p1 == p2 ? (p2 = (p1 = buf) + fread(buf, 1, bufSize, inFile)) : 0), p1 == p2 ? -1 : *p1++; }
    void input(FILE* f) { inFile = f, p1 = p2 = buf, set(); }
#endif
    void input(const char* s) { input(fopen(s, "rb")); }
    void set(bool s = true) { status = s; }
    bool get() const { return status; }
};
class Out {
    friend class IO;

private:
    FILE* outFile;
#ifndef LX_DEBUG
    char pbuf[bufSize], *pp = pbuf;
#endif

public:
#ifdef LX_DEBUG
    void flush() { fflush(outFile); }
    void putch(char c) { fputc_unlocked(c, outFile); }
    void writestr(const char* s, usize n) { fwrite(s, 1, n, outFile); }
#else
    void flush() { fwrite(pbuf, 1, pp - pbuf, outFile), pp = pbuf; }
    void putch(char c) { ((pp - pbuf == bufSize) ? flush() : void(0)), *pp++ = c; }
    void writestr(const char* s, usize n) {
        if (n >= bufSize - (pp - pbuf)) [[unlikely]]
            flush(), fwrite(s, 1, n, outFile);
        else
            memcpy(pp, s, n), pp += n;
    }
    static constexpr auto D = []() {
        constexpr u32 e0 = 0x1, e1 = 0x100, e2 = 0x10000, e3 = 0x1000000;
        std::array<u32, 10000> m{};
        int x = 0;
        for (u32 i = 0, c0 = 0x30303030; i != 10; i++, c0 += e0)
            for (u32 j = 0, c1 = c0; j != 10; j++, c1 += e1)
                for (u32 k = 0, c2 = c1; k != 10; k++, c2 += e2)
                    for (u32 l = 0, c3 = c2; l != 10; l++, c3 += e3)
                        m[x++] = c3;
        return m;
    }();
#endif
    void output(const char* s) { output(fopen(s, "wb")); }
    void output(FILE* f) { outFile = f; }
};
class IO: public In, public Out {
private:
    u32 precision = 12;

public:
    IO(FILE* i = stdin, FILE* o = stdout) { input(i), output(o); }
    ~IO() { flush(); }
    static constexpr bool blank(char c) { return c <= ' '; }
    template <typename... Args>
        requires (sizeof...(Args) > 1)
    IO& read(Args&... x) {
        if constexpr (CHECK_EOF)
            (read(x) && ...);
        else
            (read(x), ...);
        return *this;
    }
    template <Signed T>
    IO& read(T& x) {
        x = 0;
        static typename make_unsigned<T>::type t;
        bool sign = false;
#ifndef USE_MMAP
        int ch = getch();
        while (!isdigit(ch) ECHK3)
            sign = (ch == '-'), ch = getch();
        ECHK1
        t = 0;
        while (isdigit(ch))
            t = t * 10 + (ch ^ 48), ch = getch();
#else
        while (!isdigit(*ptr) ECHK4)
            sign = *ptr++ == '-';
        ECHK2
        t = *ptr++ ^ 48;
        while (~n[*reinterpret_cast<u16*&>(ptr)])
            t = t * 100 + n[*reinterpret_cast<u16*&>(ptr)++];
        if (isdigit(*ptr))
            t = t * 10 + (*ptr++ ^ 48);
#endif
        x = sign ? (~t + 1) : t;
        return *this;
    }
    template <Unsigned T>
    IO& read(T& x) {
        x = 0;
#ifndef USE_MMAP
        int ch = getch();
        while (!isdigit(ch) ECHK3)
            ch = getch();
        ECHK1
        while (isdigit(ch))
            x = (x << 1) + (x << 3) + (ch ^ 48), ch = getch();
#else
        while (!isdigit(*ptr) ECHK4)
            ptr++;
        ECHK2
        x = *ptr++ ^ 48;
        while (~n[*reinterpret_cast<u16*&>(ptr)])
            x = x * 100 + n[*reinterpret_cast<u16*&>(ptr)++];
        if (isdigit(*ptr))
            x = x * 10 + (*ptr++ ^ 48);
#endif
        return *this;
    }
    template <std::floating_point T>
    IO& read(T& x) {
        x = 0;
        T t = 1;
        bool sign = false;
        int ch = getch();
        while (!isdigit(ch) ECHK3)
            sign = (ch == '-'), ch = getch();
        ECHK1
        while (isdigit(ch))
            x = x * 10 + (ch ^ 48), ch = getch();
        if (ch == '.')
            for (ch = getch(); isdigit(ch); ch = getch())
                x += (t /= 10) * (ch ^ 48);
        x = sign ? -x : x;
        return *this;
    }
    template <typename T>
    T read() {
        static std::decay_t<T> x;
        return read(x), x;
    }
    IO& read(char& c) {
        do
            c = getch();
        while (blank(c));
        ECHK1
        return *this;
    }
    IO& read(char* s) {
        int ch = getch();
        while (blank(ch))
            ch = getch();
        ECHK1
        while (!blank(ch))
            *s++ = ch, ch = getch();
        *s = 0;
        return *this;
    }
    IO& read(std::string& s) {
        int ch = getch();
        while (blank(ch))
            ch = getch();
        ECHK1
        s.erase();
        while (!blank(ch))
            s.append(1, ch), ch = getch();
        return *this;
    }
    IO& readline(char* s) {
        char* t = s;
        int ch = getch();
        while (ch != '\n' && ch != EV)
            *s++ = ch, ch = getch();
        *s = 0;
        if (s == t && ch != '\n')
            set(false);
        return *this;
    }
    IO& readline(std::string& s) {
        s.erase();
        int ch = getch();
        while (ch != '\n' && ch != EV)
            s.append(1, ch), ch = getch();
        if (s.empty() && ch != '\n')
            set(false);
        return *this;
    }
    template <tupleLike T>
    IO& read(T& t) {
        return std::apply([&](auto&... t) { (read(t), ...); }, t), *this;
    }
    template <input_range R>
    IO& read(R&& r) { return readArray(std::forward<R>(r)); }
    template <typename T>
        requires requires (T t, IO& io) { t.read(io); }
    IO& read(T& t) { return t.read(*this), *this; }
    void setprecision(u32 n = 6) { precision = n; }
    template <typename... Args>
        requires (sizeof...(Args) > 1)
    void write(Args&&... x) { (write(std::forward<Args>(x)), ...); }
    void write() const {}
    template <Signed T>
    void write(T x) {
        static typename make_unsigned<T>::type y;
        y = x;
        if (x < 0)
            putch('-'), write(~y + 1);
        else
            write(y);
    }
    template <std::unsigned_integral T>
    void write(T x) {
#ifndef LX_DEBUG
        if (std::end(pbuf) - pp < 64)
            flush();

        auto L = [&](int x) { return x == 1 ? 0 : ten(x - 1); };
        auto R = [&](int x) { return ten(x) - 1; };

#define de(t)                            \
    case L(t)... R(t):                   \
        *(u32*)(pp) = D[x / ten((t)-4)]; \
        pp += 4;                         \
        x %= ten((t)-4);

        u64 y = x;
        switch (y) {
            de(18);
            de(14);
            de(10);
            de(6);
        case L(2)... R(2):
            *(u32*)(pp) = D[x * 100];
            pp += 2;
            break;

            de(17);
            de(13);
            de(9);
            de(5);
        case L(1)... R(1):
            *pp = x ^ 48;
            pp += 1;
            break;

        default:
            *(u32*)(pp) = D[x / ten(16)];
            pp += 4;
            x %= ten(16);
            de(16);
            de(12);
            de(8);
        case L(4)... R(4):
            *(u32*)pp = D[x];
            pp += 4;
            break;

            de(19);
            de(15);
            de(11);
            de(7);
        case L(3)... R(3):
            *(u32*)(pp) = D[x * 10];
            pp += 3;
            break;
        }
#undef de
#else
        write(u128(x));
#endif
    }
    void write(u128 x) {
        static int s[40], t = 0;
        do
            s[t++] = x % 10, x /= 10;
        while (x);
        while (t)
            putch(s[--t] ^ 48);
    }
    void write(char c) { putch(c); }
    template <std::floating_point T>
    void write(T x) {
        static char buf[512];
        *std::to_chars(buf, buf + 512, x, std::chars_format::fixed, precision).ptr = 0;
        write(buf);
    }
    void write(bool x) { putch(x ^ 48); }
    void write(char* s) { writestr(s, strlen(s)); }
    void write(const char* s) { writestr(s, strlen(s)); }
    void write(const std::string& s) { writestr(s.data(), len(s)); }
    template <typename T>
    void write(std::initializer_list<T> t) {
        auto f = std::begin(t), l = std::end(t);
        if (f != l)
            for (write(*f++); f != l; ++f) {
                putch(' ');
                write(*f);
            }
    }
    template <tupleLike T>
    void write(T&& t) {
        [&]<auto... I>(std::index_sequence<I...>) {
            (..., (I == 0 ? void(0) : putch(' '), write(std::get<I>(t))));
        }(std::make_index_sequence<std::tuple_size_v<std::decay_t<T>>>());
    }
    template <input_range R>
    void write(R&& r) {
        if constexpr (std::is_same_v<std::decay_t<R>, std::string>)
            return write(r.data());
        auto f = begin(r), l = end(r);
        if (f != l)
            for (write(*f++); f != l; ++f) {
                putch(' ');
                write(*f);
            }
    }
    template <typename T>
        requires requires (T t, IO& io) { t.write(io); }
    void write(T&& t) { t.write(*this); }
    template <typename... Args>
    void writeln(Args&&... x) { write(std::forward<Args>(x)...), putch('\n'); }
    template <std::input_iterator I>
    IO& readArray(I f, I l) {
        for (; f != l; ++f)
            read(*f);
        return *this;
    }
    template <input_range R>
    IO& readArray(R&& r) { return readArray(begin(r), end(r)); }
    template <std::input_iterator I>
    void displayArray(I f, I l, char d = ' ') {
        if (f != l)
            for (write(*f++); f != l; ++f) {
                putch(d);
                write(*f);
            }
        putch('\n');
    }
    template <input_range R>
    void displayArray(R&& r, char d = ' ') { return displayArray(begin(r), end(r), d); }
    operator bool() const { return get(); }
} io;
#ifdef LX_LOCAL
IO err(nullptr, stderr);
#define dbg(x) err.write(#x " = "), err.writeln(x)
#else
#define dbg(x) \
    do {       \
    } while (false)
#endif
template <typename F>
void multipleTests(F&& f, IO& io = ::io) {
    dR(u32, q);
    _for (q)
        f();
}
template <typename... Args>
void writeln(Args&&... x) { io.writeln(std::forward<Args>(x)...); }
template <typename T>
void writeln(std::initializer_list<T> x) { io.writeln(x); }
void YN(bool v, bool c = true) {
    if (c)
        return writeln(v ? "YES" : "NO");
    return writeln(v ? "Yes" : "No");
}
#pragma endregion

int main() {
    multipleTests([&]() {
        dR(int, n, k, x);
        if (x == 1) {
            if (n == 1)
                return YN(0);
            if (k == 1)
                return YN(0);
            if (k == 2 && (n & 1))
                return YN(0);
            YN(1);
            vi ans;
            while (n) {
                if (n == 3)
                    ans.push_back(3);
                else
                    ans.push_back(2);
                n -= ans.back();
            }
            writeln(len(ans));
            writeln(ans);
        }
        else {
            YN(1);
            writeln(n);
            writeln(vi(n, 1));
        }
    });
    return 0;
}
