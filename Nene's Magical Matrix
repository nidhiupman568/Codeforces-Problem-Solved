// clang-format off

#ifdef ONLINE_JUDGE
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#define dbg(...)
#define SOLVE solve();
#endif

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

constexpr int mod = 998244353;

using namespace std;
using namespace __gnu_pbds;
template <typename T>
using ost = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)

template <const int T> struct ModInt { const static int mod = T; int x; ModInt(int x = 0) : x(x % mod) {} ModInt(long long x) : x(int(x % mod)) {} int val() { return x; } ModInt operator+(const ModInt &a) const { int x0 = x + a.x; return ModInt(x0 < mod ? x0 : x0 - mod); } ModInt operator-(const ModInt &a) const { int x0 = x - a.x; return ModInt(x0 < 0 ? x0 + mod : x0); } ModInt operator*(const ModInt &a) const { return ModInt(1ll * x * a.x % mod); } ModInt operator/(const ModInt &a) const { return *this * a.inv(); } void operator+=(const ModInt &a) { x += a.x; if (x >= mod) x -= mod; } void operator-=(const ModInt &a) { x -= a.x; if (x < 0) x += mod; } void operator*=(const ModInt &a) { x = 1LL * x * a.x % mod; } void operator/=(const ModInt &a) { *this = *this / a; } ModInt pow(int64_t n) const { ModInt res(1), mul(x); while (n) { if (n & 1) res *= mul; mul *= mul; n >>= 1; } return res; } ModInt inv() const { int a = x, b = mod, u = 1, v = 0; while (b) { int t = a / b; a -= t * b; swap(a, b); u -= t * v; swap(u, v); } if (u < 0) u += mod; return u; } };

typedef ModInt<mod> mint; typedef long long ll; typedef vector<int> vi; typedef vector<vector<int>> vvi; typedef vector<long long> vl; typedef vector<vector<long long>> vvl; typedef vector<pair<int, int>> vpi; typedef vector<pair<long long, long long>> vpl; typedef pair<int, int> pi; typedef pair<long long, long long> pl; typedef unsigned int uint; typedef unsigned long long ull;

namespace fastio { static constexpr uint32_t SZ = 1 << 17; char ibuf[SZ]; char obuf[SZ]; char out[100]; uint32_t pil = 0, pir = 0, por = 0; struct Pre { char num[10000][4]; constexpr Pre() : num() { for (int i = 0; i < 10000; i++) { int n = i; for (int j = 3; j >= 0; j--) { num[i][j] = n % 10 | '0'; n /= 10; } } } } constexpr pre; inline void load() { memcpy(ibuf, ibuf + pil, pir - pil); pir = pir - pil + fread(ibuf + pir - pil, 1, SZ - pir + pil, stdin); pil = 0; if (pir < SZ) ibuf[pir++] = '\n'; } inline void flush() { fwrite(obuf, 1, por, stdout); por = 0; } void rd(char &c) { do { if (pil + 1 > pir) load(); c = ibuf[pil++]; } while (isspace(c)); } void rd(string &x) { x.clear(); char c; do { if (pil + 1 > pir) load(); c = ibuf[pil++]; } while (isspace(c)); do { x += c; if (pil == pir) load(); c = ibuf[pil++]; } while (!isspace(c)); } template <typename T> void rd_real(T &x) { string s; rd(s); x = stod(s); } template <typename T> void rd_integer(T &x) { if (pil + 100 > pir) load(); char c; do c = ibuf[pil++]; while (c < '-'); bool minus = 0; if constexpr (is_signed<T>::value) { if (c == '-') { minus = 1, c = ibuf[pil++]; } } x = 0; while ('0' <= c) { x = x * 10 + (c & 15), c = ibuf[pil++]; } if constexpr (is_signed<T>::value) { if (minus) x = -x; } } void rd(int &x) { rd_integer(x); } void rd(long long &x) { rd_integer(x); } void rd(unsigned int &x) { rd_integer(x); } void rd(unsigned long long &x) { rd_integer(x); } void rd(double &x) { rd_real(x); } void rd(long double &x) { rd_real(x); } void rd(__float128 &x) { rd_real(x); } template <class T, class U> void rd(pair<T, U> &p) { return rd(p.first), rd(p.second); } template <size_t N = 0, typename T> void rd_tuple(T &t) { if constexpr (N < std::tuple_size<T>::value) { auto &x = std::get<N>(t); rd(x); rd_tuple<N + 1>(t); } } template <class... T> void rd(tuple<T...> &tpl) { rd_tuple(tpl); } template <size_t N = 0, typename T> void rd(array<T, N> &x) { for (auto &d : x) rd(d); } template <class T> void rd(vector<T> &x) { for (auto &d : x) rd(d); } void read() {} template <class H, class... T> void read(H &h, T &...t) { rd(h), read(t...); } void wt(const char c) { if (por == SZ) flush(); obuf[por++] = c; } void wt(const string s) { for (char c : s) wt(c); } void wt(const char *s) { size_t len = strlen(s); for (size_t i = 0; i < len; i++) wt(s[i]); } template <typename T> void wt_integer(T x) { if (por > SZ - 100) flush(); if (x < 0) { obuf[por++] = '-', x = -x; } int outi; for (outi = 96; x >= 10000; outi -= 4) { memcpy(out + outi, pre.num[x % 10000], 4); x /= 10000; } if (x >= 1000) { memcpy(obuf + por, pre.num[x], 4); por += 4; } else if (x >= 100) { memcpy(obuf + por, pre.num[x] + 1, 3); por += 3; } else if (x >= 10) { int q = (x * 103) >> 10; obuf[por] = q | '0'; obuf[por + 1] = (x - q * 10) | '0'; por += 2; } else obuf[por++] = x | '0'; memcpy(obuf + por, out + outi + 4, 96 - outi); por += 96 - outi; } template <typename T> void wt_real(T x) { ostringstream oss; oss << fixed << setprecision(15) << double(x); string s = oss.str(); wt(s); } void wt(int x) { wt_integer(x); } void wt(long long x) { wt_integer(x); } void wt(unsigned int x) { wt_integer(x); } void wt(unsigned long long x) { wt_integer(x); } void wt(double x) { wt_real(x); } void wt(long double x) { wt_real(x); } void wt(__float128 x) { wt_real(x); } template <class T, class U> void wt(const pair<T, U> val) { wt(val.first); wt(' '); wt(val.second); } template <size_t N = 0, typename T> void wt_tuple(const T t) { if constexpr (N < std::tuple_size<T>::value) { if constexpr (N > 0) { wt(' '); } const auto x = std::get<N>(t); wt(x); wt_tuple<N + 1>(t); } } template <class... T> void wt(tuple<T...> tpl) { wt_tuple(tpl); } void wt(mint v) { wt(v.x); } template <class T, size_t S> void wt(const array<T, S> val) { auto n = val.size(); for (size_t i = 0; i < n; i++) { if (i) wt(' '); wt(val[i]); } } template <class T> void wt(const vector<T> val) { auto n = val.size(); for (size_t i = 0; i < n; i++) { if (i) wt(' '); wt(val[i]); } } void print() { wt('\n'); } template <class Head, class... Tail> void print(Head &&head, Tail &&...tail) { wt(head); if (sizeof...(Tail)) wt(' '); print(forward<Tail>(tail)...); } void __attribute__((destructor)) _d() { flush(); } } using namespace fastio; inline void println(){}; template <typename T, typename... V> inline void println(T t, V... v) { print(t); println(v...); } template <typename T> inline void print2d(const T &t) { for (const auto &i : t) print(i); }

template <typename T> using vc = vector<T>; template <typename T> using pq = priority_queue<T>; template <typename T> using qu = queue<T>; template <typename T> using dq = deque<T>; template <typename T> using stk = stack<T>; template <typename T1, typename T2> using pr = pair<T1, T2>; template <typename T> using mst = multiset<T>; template <typename Key, typename T> using ump = unordered_map<Key, T>; template <typename T> using ust = unordered_set<T>; template <typename T> using mpq = priority_queue<T, vector<T>, greater<T>>;

void __print(int x) { cerr << x; } void __print(long x) { cerr << x; } void __print(long long x) { cerr << x; } void __print(unsigned x) { cerr << x; } void __print(unsigned long x) { cerr << x; } void __print(unsigned long long x) { cerr << x; } void __print(float x) { cerr << x; } void __print(double x) { cerr << x; } void __print(long double x) { cerr << x; } void __print(char x) { cerr << '\'' << x << '\''; } void __print(const char *x) { cerr << '\"' << x << '\"'; } void __print(const string x) { cerr << '\"' << x << '\"'; } void __print(bool x) { cerr << (x ? "true" : "false"); } void __print(mint a) { cerr << a.x; } template <typename T, typename V> void __print(pair<T, V> x) { cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}'; } template <typename T> void __print(T x) { int f = 0; cerr << '{'; for (auto &i : x) cerr << (f++ ? "," : ""), __print(i); cerr << "}"; } template <typename T> void __print(stack<T> x) { vector<T> _x; while (!x.empty()) _x.push_back(x.top()), x.pop(); reverse(_x.begin(), _x.end()); __print(_x); } template <typename T> void __print(queue<T> x) { vector<T> _x; while (!x.empty()) _x.push_back(x.front()), x.pop(); reverse(_x.begin(), _x.end()); __print(_x); } template <typename T> void __print(priority_queue<T> x) { vector<T> _x; while (!x.empty()) _x.push_back(x.top()), x.pop(); reverse(_x.begin(), _x.end()); __print(_x); } template <typename T> void __print(priority_queue<T, vector<T>, greater<T>> x) { vector<T> _x; while (!x.empty()) _x.push_back(x.top()), x.pop(); reverse(_x.begin(), _x.end()); __print(_x); } void _print() { cerr << "]\n\n"; } template <typename T, typename... V> void _print(T t, V... v) { __print(t); if (sizeof...(v)) cerr << ", "; _print(v...); }
#ifndef ONLINE_JUDGE
#define dbg(x...) cerr << "[" << #x << "] = ["; _print(x)
#define SOLVE { cerr << (_ > 0 ? "\n####### TestCase " : "####### TestCase ") << _ + 1 << " #######\n\n"; solve(); }
#endif

#define int(...) int __VA_ARGS__; read(__VA_ARGS__);
#define long(...) long long __VA_ARGS__; read(__VA_ARGS__);
#define str(...) string __VA_ARGS__; read(__VA_ARGS__);
#define char(...) char __VA_ARGS__; read(__VA_ARGS__);
#define vec(type, name, size) vc<type> name(size); read(name);
#define vvec(type, name, n, m) vc<vc<type>> name(n, vc<type>(m)); read(name);
#define reif(t, ...) if (t) { __VA_ARGS__; return; }
#define coif(t, ...) if (t) { __VA_ARGS__; continue; }
#define brif(t, ...) if (t) { __VA_ARGS__; break; }

#define all(x) x.begin(), x.end()
#define rev(x) reverse(all(x))
#define s0rt(x) sort(all(x))
#define s0rtd(x) sort(all(x)), rev(x);
#define s0rtx(x, ...) sort(all(x), __VA_ARGS__);
#define sum(x) accumulate(all(x), 0ll)
#define len(x) (long long)(x.size())
#define mine(v) *min_element(all(v))
#define maxe(v) *max_element(all(v))
#define unq(x) s0rt(x), x.erase(unique(all(x)), x.end()), x.shrink_to_fit()
#define FOR1(a) for (int _ = 0; _ < (a); ++_)
#define FOR2(i, a) for (int i = 0; i < (a); ++i)
#define FOR3(i, a, b) for (int i = a; i < (b); ++i)
#define FOR4(i, a, b, c) for (int i = a; i < (b); i += (c))
#define FOR5(i, a, condn, b, add) for (int i = a; condn < b; i += add)
#define FOR1_R(a) for (int _ = (a); _ >= (0); --i)
#define FOR2_R(i, a) for (int i = (a); i >= (0); --i)
#define FOR3_R(i, a, b) for (int i = (a); i >= (b); --i)
#define FOR4_R(i, a, b, c) for (int i = (a); i >= (b); i -= c)
#define FOR5_R(i, a, condn, b, add) for (int i = (a); condn >= (b); i -= add)
#define TRAV1(i, a) for (auto &i : a)
#define TRAV2(i, j, a) for (auto &[i, j] : a)
#define LB1(x, y) lower_bound(all(x), y)
#define UB1(x, y) upper_bound(all(x), y)
#define LB2(x) lower_bound(x)
#define UB2(x) upper_bound(x)
#define CNT1(x, y) count(all(x), y)
#define cnt2(x) count(x)
#define overload5(a, b, c, d, e, f, ...) f
#define overload2(a, b, c, d, ...) d
#define overload1(a, b, c, ...) c
#define f0r(...) overload5(__VA_ARGS__, FOR5, FOR4, FOR3, FOR2, FOR1)(__VA_ARGS__)
#define f0rd(...) overload5(__VA_ARGS__, FOR5_R, FOR4_R, FOR3_R, FOR2_R, FOR1_R)(__VA_ARGS__)
#define trav(...) overload2(__VA_ARGS__, TRAV2, TRAV1)(__VA_ARGS__)
#define lb(...) overload1(__VA_ARGS__, LB1, LB2)(__VA_ARGS__)
#define ub(...) overload1(__VA_ARGS__, UB1, UB2)(__VA_ARGS__)
#define c0unt(...) overload1(__VA_ARGS__, CNT1, CNT2)(__VA_ARGS__)
#define pb push_back
#define eb emplace_back
#define ep emplace
#define ins insert
#define ers erase
#define beg begin()
#define ed end()
#define back back()
#define mkp make_pair
#define f first
#define s second
#define yes "YES"
#define no "NO"
#define fun(type, name, ...) auto name = [&](__VA_ARGS__) -> type
#define recfun(type, name, ...) auto name = [&](auto &&name, __VA_ARGS__) -> type

int popcnt(int x) { return __builtin_popcount(x); } int topbit(int x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); } int lowbit(int x) { return (x == 0 ? -1 : __builtin_ctz(x)); } int popcnt(long long x) { return __builtin_popcountll(x); } int topbit(long long x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); } int lowbit(long long x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }

template <typename T> int sgn(const T &x) { return (x > 0 ? 1 : x < 0 ? -1 : 0); }; template <typename T, typename U> T ceil(T x, U y) { return (x > 0 ? (x + y - 1) / y : x / y); } template <typename T, typename U> T floor(T x, U y) { return (x > 0 ? x / y : (x - y + 1) / y); } template <class T, class S> bool chmx(T &a, const S &b) { return (a < b ? a = b, 1 : 0); } template <class T, class S> bool chmn(T &a, const S &b) { return (a > b ? a = b, 1 : 0); }

template <typename U, typename T> T binser(U check, T _lo, T _hi, bool _minimize) { T _ret = (_minimize ? _hi + 1 : _lo - 1); while (_lo <= _hi) { T _mid = _lo + _hi >> 1ll; if (_minimize) { if (check(_mid)) { _hi = _mid - 1; _ret = _mid; } else { _lo = _mid + 1; } } else { if (check(_mid)) { _lo = _mid + 1; _ret = _mid; } else { _hi = _mid - 1; } } } return _ret; }
template <typename T> void prfxsum(vector<T> &a) { int _n = a.size(); for (int i = 1; i < _n; i++) a[i] += a[i - 1]; };
template <typename T, typename U> vector<T> getorder(T start, T size, U comp) { vector<T> ord(size); iota(ord.begin(), ord.end(), start); sort(ord.begin(), ord.end(), comp); return ord; }
template <typename T = int, typename U = int> map<T, U> mappos(const vector<T> &data, U offset) { map<T, U> ps; for (int i = 0; i < data.size(); i++) ps[data[i]] = i + offset; return ps; }
template <typename T> map<T, int> counter(const vector<T> &data) { map<T, int> x; for (auto &i : data) x[i]++; return x; };
template <typename T, typename U> T toset(const vector<U> &data) { T x; for (auto &i : data) x.insert(i); return x; };

template <typename T, typename U> U safeErase(T &setik, U target) { auto iterator = setik.find(target); assert(iterator != setik.end()); U a = *iterator; setik.erase(iterator); return a; }
template <typename T, typename U> pair<U, bool> Erase(T &setik, U target) { auto iterator = setik.find(target); pair<U, bool> a = {0, false}; if (iterator != setik.end()) { a.first = *iterator; setik.erase(iterator); } return a; }

template <typename T> T pop(multiset<T> &que, bool front) { assert(que.empty() == false); auto iterator = front ? que.begin() : prev(que.end()); T a = *iterator; que.erase(iterator); return a; } template <typename T> T pop(set<T> &que, bool front = 1) { assert(que.empty() == false); auto iterator = front ? que.begin() : prev(que.end()); T a = *iterator; que.erase(iterator); return a; } template <typename T> T pop(stack<T> &que) { T a = que.top(); que.pop(); return a; } template <typename T> T pop(queue<T> &que) { T a = que.front(); que.pop(); return a; } template <typename T> T pop(deque<T> &que, bool front) { T a = (front ? que.front() : que.back()); (front ? que.pop_front() : que.pop_back()); return a; } template <typename T> T pop(priority_queue<T> &que) { T a = que.top(); que.pop(); return a; } template <typename T> T pop(priority_queue<T, vector<T>, greater<T>> &que) { T a = que.top(); que.pop(); return a; } template <typename T> T pop(vector<T> &que) { T a = que.back; que.pop_back(); return a; }

// condition args(i, stack.top())
template <typename T, typename U> vector<int> nearestelem(const vector<T> &a, U condition, bool reverse = false, int def = -1) { int n = a.size(); stack<int> s; vector<int> ans(n, def); auto go = [&](int i) { while (!s.empty() && condition(i, s.top())) { ans[s.top()] = i; s.pop(); } s.push(i); }; if (reverse) for (int i = n - 1; i > -1; i--) go(i); else for (int i = 0; i < n; i++) go(i); return ans; }
template <typename T, typename U> constexpr T fpow(T x, U n) { T result = 1; while (n > 0) { if (n & 1ll) result *= x; x *= x; n >>= 1ll; } return result; }
template <typename T> struct prfx { vector<T> _a; int _n; prfx(const vector<T> &a) { _n = a.size() + 1; _a.resize(_n); for (int i = 0; i < _n - 1; i++) _a[i + 1] = _a[i] + a[i]; } T get(int x, int y) { if (y < x) return 0; return _a[y + 1] - _a[x]; } };
vector<int> divisors(int V) { vector<int> ret; for (int i = 1; (long long)i * i < V + 1; ++i) { if (V % i == 0) { ret.push_back(i); if (V / i != i) { ret.push_back(V / i); } } } return ret; }

const int imx = INT_MAX;
const int imn = INT_MIN;
const long long lmx = LLONG_MAX;
const long long lmn = LLONG_MIN;

// clang-format on

void solve() {
    int(n);

    if (n == 1) {
        print(1, 1);
        print(1, 1, 1);
        return;
    }

    vvi a(n, vi(n));
    vvi ans;

    int row = 0, col = n - 2;
    int turn = 0;
    while (row < n) {
        if (turn) {
            vi here;

            here.pb(2), here.pb(col + 1);
            int r = 0;

            f0rd(i, n, 1) {
                a[r++][col] = i;
                here.pb(i);
            }

            ans.pb(here);
            col--;
        } else {
            vi here;

            here.pb(1), here.pb(row + 1);
            f0r(i, 1, n + 1) {
                a[row][i - 1] = i;
                here.pb(i);
            }

            ans.pb(here);
            row++;
        }
        turn ^= 1;
    }

    int sm = 0;
    trav(i, a) sm += sum(i);

    print(sm, len(ans));
    trav(i, ans) print(i);
}

int main() {
    int(tt);
    f0r(tt) SOLVE
}
