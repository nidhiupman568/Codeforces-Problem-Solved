#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define ull unsigned long long int
#define ld unsigned long double
#define e endl
#define nl cout << endl;
#define sortvec(a) sort(a.begin(), a.end());

// vector queues shorcuts
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vb vector<bool>
#define vchr vector<char>
#define vstr vector<string>
#define pusb push_back
#define popb pop_back
#define pusf push_front
#define popf pop_front

// Array Input and Output
#define inparr(a, n)           \
    for (ll i = 0; i < n; i++) \
    cin >> a[i]
#define outarr(a, n)           \
    for (ll i = 0; i < n; i++) \
    {                          \
        cout << a[i] << " ";   \
    }                          \
    cout << endl;
#define inp2arr(a, n, m)           \
    for (ll i = 0; i < n; i++)     \
    {                              \
        for (ll j = 0; j < m; j++) \
        {                          \
            cin >> a[i][j];        \
        }                          \
    }
#define out2arr(a, n, m)           \
    for (ll i = 0; i < n; i++)     \
    {                              \
        for (ll j = 0; j < m; j++) \
        {                          \
            cout << a[i][j];       \
        }                          \
        cout << endl;              \
    }
#define inpvec(a, n)           \
    for (ll i = 0; i < n; i++) \
    {                          \
        int mid;               \
        cin >> mid;            \
        a.push_back(mid);      \
    }
#define copyarr(a, b, n)       \
    for (ll i = 0; i < n; i++) \
    {                          \
        b[i] = a[i];           \
    }

// LOOPS
#define fl(i, a, b) for (ll i = a; i < b; i++)
#define flr(i, a, b) for (ll i = a; i > b; i--)
#define fle(i, a, b) for (ll i = a; i <= b; i++)
#define flre(i, a, b) for (ll i = a; i >= b; i--)

// single double input output
#define pf(a) cout << a << endl;
#define pf2(a, b) cout << a << " " << b << endl;
#define inp(a) cin >> a;
#define inp2(a, b) cin >> a >> b;
#define ret return;

#define NO cout << "NO" << endl;
#define YES cout << "YES" << endl;
#define str string
#define mod 1000000007
// #define pi 3.1415926535897932384626
const long double pi = acos(-1);
// #define pi 3.141075920803576

// debugging
void dbg_out() { cerr << endl; }
template <typename Head, typename... Tail>
void dbg_out(Head H, Tail... T)
{
    cerr << ' ' << H;
    dbg_out(T...);
}
#define deb(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)

// SOME USEFUL FUNCTIONS

// returns vector pair with sorted elements and its previous indices
vvll sortArrPrevIndices(ll a[], ll n)
{
    vvll vp;

    // Inserting element in pair vector
    // to keep track of previous indexes
    for (int i = 0; i < n; ++i)
    {
        vp.push_back({a[i], i});
    }

    // Sorting pair vector
    sort(vp.begin(), vp.end());

    // Displaying sorted element
    // with previous indexes
    // corresponding to each element
    // cout << "Element\t"
    //      << "index" << endl;
    // for (int i = 0; i < vp.size(); i++) {
    //     cout << vp[i].first << "\t"
    //          << vp[i].second << endl;
    // }
    return vp;
}

// returns a map which contains frequency of elements
map<ll, ll> freqmap(ll *a, ll n)
{
    map<ll, ll> freq;
    // outarr(a,n);
    fl(i, 0, n)
    {
        if (freq.find(a[i]) == freq.end())
        {
            freq[a[i]] = i;
        }
    }
    return freq;
}

string isPalindrome(str S)
{
    str P = S;

    reverse(P.begin(), P.end());

    if (S == P)
    {
        return "yes";
    }
    else
    {
        return "no";
    }
}

int largestPower(int n, int p)
{
    // Initialize result
    int x = 0;

    // Calculate x = n/p + n/(p^2) + n/(p^3) + ....
    while (n)
    {
        n /= p;
        x += n;
    }
    return x;
}

// Utility function to do modular exponentiation.
// It returns (x^y) % p
// binpoww function
int power(int x, int y, int p)
{
    int res = 1; // Initialize result
    x = x % p;   // Update x if it is more than or
    // equal to p
    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;

        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}

// Returns n! % p
int modFact(int n, int p)
{
    if (n >= p)
        return 0;

    int res = 1;

    // Use Sieve of Eratosthenes to find all primes
    // smaller than n
    bool isPrime[n + 1];
    memset(isPrime, 1, sizeof(isPrime));
    for (int i = 2; i * i <= n; i++)
    {
        if (isPrime[i])
        {
            for (int j = 2 * i; j <= n; j += i)
                isPrime[j] = 0;
        }
    }

    // Consider all primes found by Sieve
    for (int i = 2; i <= n; i++)
    {
        if (isPrime[i])
        {
            // Find the largest power of prime 'i' that divides n
            int k = largestPower(n, i);

            // Multiply result with (i^k) % p
            res = (res * power(i, k, p)) % p;
        }
    }
    return res;
}

// returns distinct elements from the array
int dist(ll *arr, ll n)
{
    unordered_set<int> s;
    int res = 0;
    for (int i = 0; i < n; i++)
    {

        if (s.find(arr[i]) == s.end())
        {
            s.insert(arr[i]);
            res++;
        }
    }
    return res;
}
int diststr(str arr, ll j, ll n)
{
    unordered_set<char> s;
    int res = 0;
    for (int i = j; i < n; i++)
    {

        if (s.find(arr[i]) == s.end())
        {
            s.insert(arr[i]);
            res++;
        }
    }
    return res;
}

// returns the frequency of a particular element from the array
int freqnum(ll *a, ll n, ll x)
{
    int count = 0;
    for (int i = 0; i < n; i++)
        if (a[i] == x)
            count++;
    return count;
}

// returns the frequency of a particular character from the string
int freqchar(str a, ll n, char x)
{
    int count = 0;
    for (int i = 0; i < n; i++)
        if (a[i] == x)
            count++;
    return count;
}

// returns element from array which is repeated maximum no. of times
int maxFreq(ll *arr, ll n, ll k)
{
    for (int i = 0; i < n; i++)
        arr[arr[i] % k] += k;

    int max = arr[0], result = 0;
    for (int i = 1; i < n; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
            result = i;
        }
    }
    for (int i = 0; i < n; i++)
    {
        arr[i] = arr[i] % k;
    }

    return result;
}

int SumOfDigitsNum(int x)
{
    int n = 0;
    while (x != 0)
    {
        n = n + x % 10;
        x = x / 10;
    }
    return n;
}

int SumOfDigitsStr(string x)
{
    int n = 0;
    fl(i, 0, x.length())
    {

        n = n + x[i] - 48;
    }
    return n;
}

// sum of elements of array
ll sumarr(ll *a, ll n)
{
    ll mp22 = 0;
    fl(i, 0, n)
    {
        mp22 = mp22 + a[i];
    }
    return mp22;
}
// position of the particular element from the array
int pos(str s, ll n, char x)
{
    int p = 0;
    for (int i = 0; i < n; i++)
    {
        if (s[i] == x)
        {
            return i + 1;
        }
    }
    return -1;
}

int gcd(int a, int b)
{
    int result = min(a, b); // Find Minimum of a and b
    while (result > 0)
    {
        if (a % result == 0 && b % result == 0)
        {
            break;
        }
        result--;
    }
    return result; // return gcd of a and b
}

int lcm(int a, int b)
{
    int greater = max(a, b);
    int smallest = min(a, b);
    for (int i = greater;; i += greater)
    {
        if (i % smallest == 0)
            return i;
    }
}

// An iterative binary search function.
int binarySearch(int arr[], int l, int r, int x)
{
    while (l <= r)
    {
        int m = l + (r - l) / 2;

        // Check if x is present at mid
        if (arr[m] == x)
            return m;

        // If x greater, ignore left half
        if (arr[m] < x)
            l = m + 1;

        // If x is smaller, ignore right half
        else
            r = m - 1;
    }

    // If we reach here, then element was not present
    return -1;
}

ll maxe = 0;
// Depth-First Search
void DFS(ll startRow, ll startCol, vector<vector<ll>> &grid, vector<vector<bool>> &visited)
{
    ll count = 0;
    ll n = grid.size();
    ll m = grid[0].size();
    // Create a stack of pairs to store cell coordinates (row, col)
    stack<pair<ll, ll>> st;
    st.push({startRow, startCol});

    while (!st.empty())
    {
        // Pop the top cell from the stack
        ll row = st.top().first;
        ll col = st.top().second;
        st.pop();

        // Check if the cell is out of bounds or already visited
        if (row < 0 || col < 0 || row >= n || col >= m || visited[row][col])
            continue;

        if ((row <= n && col <= m) || (row >= 0 && col >= 0))
        {
            if (grid[row][col] == 0)
            {

                continue;
            }
        }

        // Mark the current cell as visited
        visited[row][col] = true;

        // Process the current cell (you can print the value here)

        // cout << grid[row][col] << " ";
        count += grid[row][col];
        // Push all unvisited neighbors of the current cell into the stack
        st.push({row - 1, col}); // Up
        st.push({row + 1, col}); // Down
        st.push({row, col - 1}); // Left
        st.push({row, col + 1}); // Right
    }
    // pf(count);
    maxe = max(maxe, count);
}

bool prime(ll num)
{
    if (num <= 1)
    {
        return false;
    }
    if (num <= 3)
    {
        return true;
    }
    for (ll i = 2; i <= sqrt(num); ++i)
    {
        if (num % i == 0)
        {
            return false;
        }
    }
    return true;
}

// sieveofEratosthenes for prime from 1 to n;
void SieveOfEratosthenes(vb &prime, int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.;

    for (int p = 2; p * p <= n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p greater than or
            // equal to the square of it numbers which are
            // multiple of p and are less than p^2 are
            // already been marked.
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
}

vb SieveOfEratosthenesInRange(int m, int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    vb prime(n + 1, true);
    // memset(prime, true, sizeof(prime));

    for (int p = 2; p * p <= n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p greater than or
            // equal to the square of it. Numbers which are
            // multiples of p and are less than p^2 are
            // already marked.
            for (int i = max(p * p, (m + p - 1) / p * p); i <= n; i += p)
            {
                prime[i] = false;
            }
        }
    }

    return prime;
}

int isPerfectSquare(long double x)
{
    // Find floating point value of
    // square root of x.
    if (x >= 0)
    {

        long long sr = sqrt(x);

        // if product of square root
        // is equal, then
        // return T/F
        if (sr * sr == x)
            ;
        {
            return sr;
        }
    }
    // else return false if n<0
    return 0;
}

// below are the modular arithmetic functions
long add(long a, long b)
{
    return (((long)(a + mod) % mod + (b + mod) % mod) % mod);
}
long sub(long a, long b)
{
    return (((long)(a + mod) % mod + ((-1 * b) + mod) % mod) % mod);
}

ll mul(ll a, ll b)
{
    return (((ll)a % mod * b % mod) % mod);
}
long inv(long x)
{

    return pow(x, mod - 2);
}

// long div(long x, long y)
// {
//     return mul(x, inv(y));
// }

ll poww(ll a, ll b)
{
    a %= mod;
    ll res = 1;
    while (b > 0)
    {
        if ((b & 1) != 0)
            res = mul(res, a);
        a = mul(a, a);
        b /= 2;
    }
    return res;
}

// abs() works as defined for all input integers, except for one integer: the INT_MIN. For 32-bit integers, the value of INT_MIN is -2147483648. abs( INT_MIN ) returns INT_MIN back!
// so this can be used for safer operations
// https://codeyarns.com/tech/2012-02-14-c-abs-and-its-quirk-with-int_min.html#gsc.tab=0
unsigned int absu(int value)
{
    return (value < 0) ? -((unsigned int)value) : (unsigned int)value;
}

string removeSpecialCharacter(str s)
{
    // str
    str mp22 = "";
    for (int i = 0; i < s.size(); i++)
    {

        if ((s[i] >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z') || (s[i] >= '0' && s[i] <= '9'))
        {
            mp22 += s[i];
        }
    }
    // pf(mp22);
    return mp22;
    // cout << s;
}
// functions used to sort 2-d array acc to  the particular column
bool sortcol0(const vector<ll> &v1, const vector<ll> &v2)
{
    return v1[0] < v2[0];
}
bool sortcol1(const vector<ll> &v1, const vector<ll> &v2)
{
    return v1[1] > v2[1];
}
// Ascii lowercase - 97-122
// uppercase - 65-90
bool sorted(vll a, ll mid)
{
    fl(i, 0, a.size())
    {
        a[i] = abs(a[i] - mid);
    }
    fl(i, 0, a.size() - 1)
    {
        if (a[i] > a[i + 1])
        {
            return false;
        }
    }
    return true;
}
// problem solving function
void testcase()
{
  ll n;
  inp(n);
  vector <vll> vec(n, vll(2,0));
  inp2arr(vec,n,2);

    fl(i,0,n){
        cout<<max(vec[i][0], vec[i][1])<<endl;
    }

}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

// #ifndef ONLINE_JUDGE
//     freopen("input.txt", "r", stdin);
//     freopen("output.txt", "w", stdout);
// #endif

    int t = 1;
    // inp(t);
    while (t--)
    {
        testcase();
    }
    return 0;
}
