#include<bits/stdc++.h>
#define ll long long
using namespace std;
ll log_2(ll n) {
    if(n==0) {
        return -1; 
    }
    ll pos=0;
    ll bitPos=-1;
    while(n>0) {
        if(n&1) {
            bitPos=pos;
        }
        n=n>>1;
        pos++;
    }
    return bitPos;
}
ll MEX(vector<ll> &a) {
    std::unordered_set<ll> s(a.begin(), a.end());
    ll mex=0;
    while(s.find(mex)!=s.end()) {
        mex++;
    }
    return mex;
}
int binarySearch(vector<ll> &arr, int l, int r, int x) {
    while(l<=r) {
        int m=l+((r-l)/2);
        if(arr[m]==x) {
            return m;
        }
        if(arr[m]<x) {
            l=m+1;
        } else {
            r=m-1;
        }
    }
    return -1;
}
int countSubstring(string &s1, string &s2) {
	if(s2.length()==0) {
        return 0;
    }
	int ct=0;
	for(size_t offset=s1.find(s2); offset!=std::string::npos; offset=s1.find(s2, offset+s2.length())) {
		++ct;
	}
	return ct;
}
bool isSubSequence(string s1, string s2) {
    int n = s1.length(), m = s2.length();
    int i = 0, j = 0;
    while (i < n && j < m) {
        if (s1[i] == s2[j])
            i++;
        j++;
    }
    return i == n;
}
bool ok(vector<int> &a) {
    int n=a.size();
    int ct=0;
    for(int i=0; i<n; i++) {
        if(a[i]>a[(i+1)%n]) {
            ct++;
        }
    }
    return ct<=1;
}
ll GCD(vector<ll> &a) {
    int n=a.size();
    ll gcd=0; 
    for(int i=0; i<n; i++) { 
        gcd=__gcd(gcd, a[i]); 
    } 
    return gcd; 
}
ll LCM(vector<ll> a) {
    ll lcm=a[0];
    for(int i=1; i<a.size(); i++) {
        ll num1=lcm;
        ll num2=a[i];
        ll gcd=__gcd(num1, num2);
        lcm=(lcm*a[i])/gcd;
    }
    return lcm;
}
ll lcm(ll a, ll b) {
    return (a/__gcd(a, b))*b;
}
bool isSorted(vector<ll> a, int size) {
    for(int i=1; i<size; i++) {
        if(a[i-1]>a[i]) {
            return false;
        }
    }
    return true;
}
ll factorial(int n) {
    vector<ll> f(n+1);
    f[0]=1;
    f[1]=1;
    for(int i=2; i<=n; i++) {
        f[i]=f[i-1]*i;
    }
    return f[n];
}
// int dfs(vector<vector<int>> &a, vector<vector<int>> &vis, int i, int j) {
//     int n=a.size(), m=a[0].size();
//     vis[i][j]=1;
//     int ans=a[i][j];
//     if(i && a[i-1][j] && !vis[i-1][j]) {
//         ans+=dfs(a, vis, i-1, j);
//     }
//     if(i!=n-1 && a[i+1][j] && !vis[i+1][j]) {
//         ans+=dfs(a, vis, i+1, j);
//     }
//     if(j && a[i][j-1] && !vis[i][j-1]) {
//         ans+=dfs(a, vis, i, j-1);
//     }
//     if(j!=m-1 && a[i][j+1] && !vis[i][j+1]) {
//         ans+=dfs(a, vis, i, j+1);
//     }
//     return ans;
// }
// const int NMAX=2e5+5;
// int dp[NMAX], id[NMAX];
// vector<pair<int, int>> edg[NMAX];
// void dfs(int u) {
//     for(auto it : edg[u]) {
//         if(dp[it.first]==0) {
//             dp[it.first]=dp[u]+(it.second<=id[u]);
//             id[it.first]=it.second;
//             dfs(it.first);
//         }
//     }
// }
ll sumOfDigits(ll n) {
    ll sum=0;
    while(n) {
        sum+=(n%10);
        n/=10;
    }
    return sum;
}
ll flips(vector<ll> &a) {
    ll n=a.size();
    ll ct=0, ans=0;
    for(int i=n-1; i>=0; i--) {
        if(!a[i]) {
            ct++;
        } else {
            ans+=ct;
        }
    }
    return ans;
}
const ll mod=1e9+7;
bool is_square(ll n) {
    ll l=1, r=3037000500, mid;
    while(r-l>1) {
        mid=(l+r)/2;
        ll x=mid*mid;
        if(x<=n) {
            l=mid;
        } else {
            r=mid;
        }
    }
    return (l*l==n);
}
ll power(ll a, ll b) {
    ll ans=1;
    while(b) {
        if(b%2) {
            ans*=a;
        }
        a*=a;
        b/=2;
    }
    return ans;
}
ll powmod(ll a, ll b, ll mod) {
    ll ans=1;
    a%=mod;
    while(b) {
        if(b%2) {
            ans=(a*ans)%mod;
        }
        a=(a*a)%mod;
        b/=2;
    }
    return ans;
}
ll factmod(ll n, ll mod) {
    ll ans=1;
    while(n) {
        ans=(ans*(n--))%mod;
    }
    return ans;
}
ll ncrmod(ll n, ll r, ll mod) {
    return (((factmod(n, mod)*powmod(factmod(r, mod), mod-2, mod))%mod)*powmod(factmod(n-r, mod), mod-2, mod))%mod;
}
// ll score(vector<int> &p, vector<int> &a, int s, int k) {
// 	int n=p.size();
// 	ll mx=0, cur=0;
// 	vector<int> vis(n, 0);
// 	while(!vis[s] && k>0) {
// 		vis[s]=1;
// 		mx=max(mx, cur+(1ll*k*a[s]));
// 		cur+=a[s];
// 		k--;
// 		s=p[s];
// 	}
// 	return mx;
// }
// void add_divs(int x, map<int, int> &mp) {
//     int i=2;
//     while(i*i<=x) {
//         while(x%i==0) {
//             mp[i]++;
//             x/=i;
//         }
//         i++;
//     }
//     if(x>1) {
//         mp[x]++;
//     }
// }
// int getPos(vector<int> &dp, int n, int pos) {
//     if(pos>n) {
//         return n+1;
//     }
//     if(pos==n) {
//         return 0;
//     }
//     return dp[pos];
// }
// const int N=200003;
// const int M=30;
// int pf[N][M];
// int a[N];
// void Buildprefix(int n) {
//     for(int i=0; i<n; i++) {
//         for(int j=0; j<30; j++) {
//             if(a[i]&(1<<j)) {
//                 pf[i+1][j]=pf[i][j]+1;
//             } else{
//                 pf[i+1][j]=pf[i][j];
//             }
//         }
//     }
// }
// void dfs(int v, int p, vector<vector<int>> g, vector<ll> ct) {
//     if(g[v].size()==1 && g[v][0]==p) {
//         ct[v]=1;
//     } else {
//         for(auto u : g[v]) {
//             if(u!=p) {
//                 dfs(u, v, g, ct);
//                 ct[v]+=ct[u];
//             }
//         }
//     }
// }
bool helper(const string &s, const string &t) {
    int i=0, j=0;
    while(i<s.length() && j<t.length()) {
        if(s[i]==t[j]) {
            ++j;
        }
        ++i;
    }
    return j==t.length();
}
ll findMedian(vector<ll> &a, int ind) {
    vector<ll> c;
    for(int i=0; i<a.size(); i++) {
        if(i!=ind) {
            c.push_back(a[i]);
        }
    }
    sort(c.begin(), c.end());
    if(c.size()%2) {
        return c[(c.size()-1)/2];
    } else {
        return c[(c.size()/2)-1];
    }
}
ll dist(ll x1, ll y1, ll x2, ll y2) {
    return (1LL*(x2-x1)*(x2-x1))+(1LL*(y2-y1)*(y2-y1));
}
ll modInv(ll a, ll m) {
    ll m0=m, y=0, x=1;
    if(m==1) {
        return 0;
    }
    while(a>1) {
        ll q=a/m;
        ll t=m;
        m=a%m;
        a=t;
        t=y;
        y=x-q*y;
        x=t;
    }
    if(x<0) {
        x+=m0;
    }
    return x;
}
void solve() {
    // int l, r;
    // cin>>l>>r;
    // int odd=0;
    // for(int i=l; i<=r; i++) {
    //     if(i%2) {
    //         odd++;
    //     }
    // }
    // cout<<odd/2<<endl;
    // int n, m;
    // cin>>n>>m;
    // vector<ll> a(n+1, 0);
    // ll maxi=INT_MIN;
    // for(int i=1; i<=n; i++) {
    //     cin>>a[i];
    //     maxi=max(maxi, a[i]);
    // }
    // while(m--) {
    //     char c;
    //     cin>>c;
    //     ll l, r;
    //     cin>>l>>r;
    //     if(maxi>=l && maxi<=r) {
    //         if(c=='+') {
    //             maxi++;
    //         } else {
    //             maxi--;
    //         }
    //     }
    //     cout<<maxi<<" ";
    // }
    // cout<<endl;
    // int n;
    // cin>>n;
    // ll a, b;
    // cin>>a>>b;
    // vector<ll> c(n);
    // ll d=__gcd(a, b);
    // for(int i=0; i<n; i++) {
    //     cin>>c[i];
    //     c[i]%=d;
    // }
    // sort(c.begin(), c.end());
    // ll range=c[n-1]-c[0];
    // ll mini=c[0], maxi=c[n-1];
    // for(int i=0; i<n; i++) {
    //     range=min(range, maxi-mini);
    //     mini=c[i+1];
    //     maxi=c[i]+d;
    // }
    // cout<<range<<endl;
    // ll x, y, k;
    // cin>>x>>y>>k;
    // ll a=x/k, b=y/k;
    // if(x%k) {
    //     a++;
    // }
    // if(y%k) {
    //     b++;
    // }
    // ll ans;
    // if(a>b) {
    //     ans=2*(a)-1;
    // } else {
    //     ans=2*b;
    // }
    // cout<<ans<<endl;
    // ll n, m, q;
    // cin>>n>>m>>q;
    // vector<ll> b(m);
    // for(ll i=0; i<m; i++) {
    //     cin>>b[i];
    // }
    // sort(b.begin(), b.end());
    // while(q--) {
    //     ll x;
    //     cin>>x;
    //     ll dum=x;
    //     auto l=upper_bound(b.begin(), b.end(), dum);
    //     ll ans;
    //     if(l==b.begin()) {
    //         ans=*l-1;
    //     } else if(l==b.end()) {
    //         --l;
    //         ll x=*l;
    //         ans=n-x;
    //     } else {
    //         ll x=*l;
    //         ll y=*(--l);
    //         ans=(x-y)/2LL;
    //     }
    //     cout<<ans<<endl;
    // }
    // ll n, x, y;
    // cin>>n>>x>>y;
    // ll ans=0;
    // x=min(x, y);
    // cout<<(n+x-1)/x<<endl;
    // ll n;
    // cin>>n;
    // vector<ll> a(n);
    // ll ans=0;
    // for(ll i=0; i<n; i++) {
    //     cin>>a[i];
    //     ans+=a[i];
    // }
    // cout<<ans-(2*a[n-2])<<endl;
    // int n, k;
    // cin>>n>>k;
    // vector<int> a(n);
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    // }
    // int robin=0;
    // int ans=0;
    // for(int i=0; i<n; i++) {
    //     if(!a[i]) {
    //         if(robin) {
    //             a[i]++;
    //             robin--;
    //             ans++;
    //         }
    //     } else {
    //         if(a[i]>=k) {
    //             robin+=a[i];
    //             a[i]=0;
    //         }
    //     }
    // }
    // cout<<ans<<endl;
    // ll n, k;
    // cin>>n>>k;
    // if((((n*(n+1))/2)-(((n-k)*(n-k+1))/2))%2) {
    //     cout<<"no"<<endl;
    // } else {
    //     cout<<"yes"<<endl;
    // }
    // int n;
    // cin>>n;
    // vector<ll> a(n);
    // ll sum=0;
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    //     sum+=a[i];
    // }
    // sort(a.begin(), a.end());
    // if(n<3) {
    //     cout<<-1<<endl;
    // } else {
    //     cout<<max(0LL, (a[n/2]*2*n)-sum+1)<<endl;
    // }
    // int n, d, k;
    // cin>>n>>d>>k;
    // vector<int> lPf(n+1), rPf(n+1);
    // for(int i=0; i<k; i++) {
    //     int l, r;
    //     cin>>l>>r;
    //     lPf[l]++;
    //     rPf[r]++;
    // }
    // for(int i=0; i<n; i++) {
    //     lPf[i+1]+=lPf[i];
    //     rPf[i+1]+=rPf[i];
    // }
    // int maxi=0, rob=0, mrs=0;
    // int mini=INT_MAX;
    // for(int i=d; i<=n; i++) {
    //     int curr=lPf[i]-rPf[i-d];
    //     if(curr>maxi) {
    //         maxi=curr;
    //         rob=i-d+1;
    //     }
    //     if(curr<mini) {
    //         mini=curr;
    //         mrs=i-d+1;
    //     }
    // }
    // cout<<rob<<" "<<mrs<<endl;
    // int n;
    // cin>>n;
    // vector<int> a(n);
    // int ct1=0, ct2=0;
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    //     if(i%2) {
    //         ct1++;
    //     } else {
    //         ct2++;
    //     }
    // }
    // int maxi1=0, maxi2=0;
    // for(int i=0; i<n; i++) {
    //     if(i%2) {
    //         maxi1=max(maxi1, a[i]);
    //     } else {
    //         maxi2=max(maxi2, a[i]);
    //     }
    // }
    // cout<<max(maxi1+ct1, maxi2+ct2)<<endl;
    // ll n, q;
    // cin>>n>>q;
    // vector<ll> a(n);
    // for(ll i=0; i<n; i++) {
    //     cin>>a[i];
    // }
    // a.push_back(a[n-1]);
    // map<ll, ll> mp;
    // for(ll i=0; i<n; i++) {
    //     ll k=(i+1)*(n-i)-1;
    //     mp[k]++;
    //     ll ct=a[i+1]-a[i]-1;
    //     ll key=(i+1)*(n-i-1);
    //     mp[key]+=ct;
    // }
    // while(q--) {
    //     ll x;
    //     cin>>x;
    //     cout<<mp[x]<<" ";
    // }
    // cout<<endl;
    // ll n, k;
    // cin>>n>>k;
    // if(k==1) {
    //     cout<<n<<endl;
    // } else {
    //     ll ans=0;
    //     while(n) {
    //         ans+=(n%k);
    //         n/=k;
    //     }
    //     cout<<ans<<endl;
    // }
    // ll k;
    // cin>>k;
    // cout<<k+int(sqrt(k)+0.5)<<endl;
    // int n;
    // cin>>n;
    // vector<ll> a(n);
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    // }
    // while(a.size()>1) {
    //     sort(a.begin(), a.end());
    //     reverse(a.begin(), a.end());
    //     ll x=a[a.size()-2], y=a[a.size()-1];
    //     a.pop_back();
    //     a.pop_back();
    //     a.push_back((x+y)/2);
    // }
    // cout<<a[0]<<endl;
    // int n;
    // cin>>n;
    // ll x;
    // cin>>x;
    // vector<ll> a(n);
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    // }
    // sort(a.begin(), a.end());
    // set<ll> s;
    // for(int i=0; i<n; i++) {
    //     ll m=0;
    //     ll l=0, r=(2*n)/x;
    //     while(l<=r) {
    //         ll mid=(l+r)/2;
    //         if(s.find(mid*x+a[i])==s.end()) {
    //             m=mid;
    //             r=mid-1;
    //         } else {
    //             l=mid+1;
    //         }
    //     }
    //     s.insert(m*x+a[i]);
    // }
    // vector<ll> b(s.begin(), s.end());
    // ll ans=-1;
    // if(b[0]!=0) {
    //     cout<<0<<endl;
    // } else {
    //     ans=MEX(b);
    //     cout<<ans<<endl;
    // }
    // int n;
    // cin>>n;
    // vector<int> a(n);
    // int ans=0;
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    //     ans^=a[i];
    // }
    // if(!ans) {
    //     cout<<0<<endl;
    // } else {
    //     if(n%2) {
    //         cout<<ans<<endl;
    //     } else {
    //         cout<<-1<<endl;
    //     }
    // }
    // int n;
    // cin>>n;
    // string s;
    // cin>>s;
    // char c=s[0];
    // for(int i=1; i<n; i++) {
    //     if(s[i]<c) {
    //         c=s[i];
    //     }
    // }
    // for(int i=0; i<n; i++) {
    //     if(s[n-1-i]==c) {
    //         cout<<c;
    //         int x=n-1-i;
    //         for(int j=0; j<n; j++) {
    //             if(j!=x) {
    //                 cout<<s[j];
    //             }
    //         }
    //         cout<<endl;
    //         break;
    //     }
    // }
    // string s, t;
    // cin>>s>>t;
    // int ans=0;
    // int n=min(s.length(), t.length());
    // for(int i=0; i<n; i++) {
    //     if(s[i]==t[i]) {
    //         ans++;
    //     } else {
    //         break;
    //     }
    // }
    // if(!ans) {
    //     cout<<s.length()+t.length()-ans<<endl;
    // } else {
    //     cout<<s.length()+t.length()-ans+1<<endl;
    // }
    // int n;
    // cin>>n;
    // if(n%2) {
    //     cout<<"Kosuke"<<endl;
    // } else {
    //     cout<<"Sakurako"<<endl;
    // }
    // int n;
    // cin>>n;
    // vector<vector<int>> a(n, vector<int> (n, 0));
    // for(int i=0; i<n; i++) {
    //     for(int j=0; j<n; j++) {
    //         cin>>a[i][j];
    //     }
    // }
    // vector<vector<int>> vec;
    // for(int i=n-1; i>=0; i--) {
    //     int x=i, y=0;
    //     vector<int> dum;
    //     while(x<n && y<n) {
    //         dum.push_back(a[x][y]);
    //         x++;
    //         y++;
    //     }
    //     vec.push_back(dum);
    // }
    // for(int i=1; i<n; i++) {
    //     int x=0, y=i;
    //     vector<int> dum;
    //     while(x<n && y<n) {
    //         dum.push_back(a[x][y]);
    //         x++;
    //         y++;
    //     }
    //     vec.push_back(dum);
    // }
    // int ans=0;
    // for(int i=0; i<vec.size(); i++) {
    //     int maxi=0;
    //     for(int j=0; j<vec[i].size(); j++) {
    //         if(vec[i][j]<0) {
    //             maxi=max(maxi, abs(vec[i][j]));
    //         }
    //     }
    //     ans+=maxi;
    // }
    // cout<<ans<<endl;
    // int n;
    // cin>>n;
    // vector<int> a(n);
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    // }
    // int flag=1;
    // for(int i=0; i<n-1; i++) {
    //     if(abs(a[i]-a[i+1])!=5 && abs(a[i]-a[i+1])!=7) {
    //         flag=0;
    //         break;
    //     }
    // }
    // if(flag) {
    //     cout<<"yes"<<endl;
    // } else {
    //     cout<<"no"<<endl;
    // }
    // ll n, m, r, c;
    // cin>>n>>m>>r>>c;
    // ll pos=((r-1)*m)+c;
    // ll rem=(n*m)-pos;
    // cout<<((n-r)*m)+(n*m)-((r-1)*m)-c-n+r<<endl;
    // int n;
    // cin>>n;
    // vector<int> a(2*n);
    // int ct=0;
    // for(int i=0; i<2*n; i++) {
    //     cin>>a[i];
    //     if(a[i]) {
    //         ct++;
    //     }
    // }
    // cout<<ct%2<<" "<<min(ct, (2*n)-ct)<<endl;
    // int n;
    // cin>>n;
    // if(n==1) {
    //     cout<<"0"<<endl;
    // } else {
    //     cout<<"01";
    //     for(int i=2; i<n; i++) {
    //         cout<<'0';
    //     }
    //     cout<<endl;
    // }
    // int n;
    // cin>>n;
    // vector<int> a(n);
    // int maxi=INT_MIN, mini=INT_MAX;
    // for(int i=0; i<n; i++) {
    //     cin>>a[i];
    //     maxi=max(maxi, a[i]);
    //     mini=min(mini, a[i]);
    // }
    // cout<<(n-1)*(maxi-mini)<<endl;
    ll l, r, k;
    cin>>l>>r>>k;
    cout<<max((r/k)-l+1LL, 0LL)<<endl;
}
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin>>t;
    while(t--) {
        solve();
    }
    return 0;
}
