#include <bits/stdc++.h>
#define int long long
//  #include <ext/pb_ds/assoc_container.hpp>
 
// using namespace __gnu_pbds;
// using namespace std;
// using namespace chrono;

// typedef tree<int,null_type,less_equal<int>,rb_tree_tag,
// tree_order_statistics_node_update> pbds ; 


// long long mod=1e9+7;
using namespace std; 
 #define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
 // vector<vector<long long int>>dp(10,vector<long long int>(N,-1));
 // long long int solve(long long int i,long long j){
 //    if(dp[i][j]!=-1){
 //        return dp[i][j];
 //    }
 //    long long left=10-i;
 //    if(j<left){
 //        return dp[i][j]=1;
 //    }
 //    if(j ==left){
 //        return dp[i][j]=2;
 //    }
 //    long long ans=0;
 //    ans=solve(1,(j-left));
 //    ans%=mod;
 //    ans+=solve(0,(j-left));
 //    ans%=mod;
 //    return dp[i][j]=ans;
 // }
 
// #define endl '\n'
// long long int  calc(const string &s ,char c){
// if(s.size()==1){
//     return s[0]!=c;
// ;}
// ll mid=s.size()/2;
// ll cntl=calc(string(s.begin(),s.begin()+mid),c+1);
// cntl+=s.size()/2 -count(s.begin()+mid,s.end(),c);
// ll cntr=calc(string(s.begin()+mid,s.end()),c+1);
// cntr+=s.size()/2 -count(s.begin(),s.begin()+mid,c);
// return min(cntl,cntr);
 
 
// }
// long long int solve(string s,long long int x,long long int y){
 
//     ll cnt=0;
//     for(auto c: s){
//         if(c-'0'==x){
//             cnt++;swap(x,y);
//         }
//     }
//     if(x!=y && cnt%2==1){
//         cnt--;
//     }
//     return cnt;
// }
bool possibl(int x, int y, int n, int m) {
    return x >= 0 && x < n && y >= 0 && y < m;
}
// int dx[] = {0, 0, 1, -1};
// int dy[] = {1, -1, 0, 0};
    
  // int cnt[2000001];
// int dp[200001][2],arr[200001],n;
// int func(int x,int turn){
//     if(x>=n){
//         return 0;
//     }
//     if(x==n-1){
//         if(turn==1){
//             return 0;
//         }
//         else{
//         return arr[x];
//     }}
//     if(dp[x][turn]!=-1){
//         return dp[x][turn];
//     }
//     if(turn==1){
//        return  dp[x][turn]=min(func(x+1,0),func(x+2,0));
//     }
//     else{
//       return dp[x][turn]=min(arr[x]+func(x+1,1),arr[x]+arr[x+1]+func(x+2,1));
//     }
    
// }
  bool can(int m, int s)
{
    return s >= 0 && s <= 9 * m;
}
 
 
 // const int INF= 1e18+5;
bool prim(int n){
  if(n<2){
    return false;
  }
  for(int i=2;i<=sqrt(n);i++){
    if(n%i==0){
      return false;
    }
  }
  return true;
}
vector<int> pdivisors(int n){
  vector<int>divisors;
  for(int i=2;i<=sqrt(n);i++){
    if(n%i==0 && prim(i)){
      divisors.push_back(i);
    }
  }
  return divisors;
}
vector<int>compdiv(int n){
  vector<int>divisors;
  for(int i=2;i<=sqrt(n);i++){
    if(n%i==0 && !prim(i)){
      divisors.push_back(i);
      if(i!=n/i && !prim(n/i)){
        divisors.push_back(n/i);
      }
    }
  }
  return divisors;
}
bool is_palindrome(vector<int>& v) {
    int n = v.size();
    for (int i = 0; i < n / 2; i++) {
        if (v[i] != v[n - i - 1]) {
            return false;
        }
    }
    return true;
}
int biggest_palindrome(vector<int>& a) {
    int n = a.size();
    int max_val = *max_element(a.begin(), a.end()); 
    for (int x = max_val; x >= 1; x--) { 
        vector<int> remainders(n);
        for (int i = 0; i < n; i++) {
            remainders[i] = (a[i]+x) % x; 
        }
 
        if (is_palindrome(remainders)) {
            return x; 
        }
    }
    return 0; 
}
int bakery(int n, int k,int ct){
  if(n==0  ){
    return 1;
  }
  int nt=log2(n);
  nt=min(nt,k);
  int an=pow(2,nt);
  if(n>pow(2,k-1)){
    return pow(2,k)-ct;
  }
  return an-ct+bakery(n-an,k,ct+1);
}
// int a=0,b=0;
// int rec(int n,int turn){
//   if(n==0){
//     return 0;
//   }
//   if(n==4){
//     if(turn==0){
//       a+=3;
//     }
//     else{
//       a++;
//     }
//     return 0;
//   }
//   if(turn==0){
// if(n%2==0){
//   if(n%4==0){
//     a++;
//     return rec(n-1,1);
//   }
//   else{
//   a+=n/2;
//   return rec(n/2,1);
//   }}
//   else{
// a++;
// return rec(n-1,1);
//   }
// }
// else{
//   if(n%2==0){
//     if(n%4==0){
//       b++;
//       return rec(n-1,0);
//     }
//     else{
//   b+=n/2;
//   return rec(n/2,0);
//   }}
//   else{
// b++;
// return rec(n-1,0);
//   }
// }
// }
// int mod =1e9+7;
 
// int binPow(int a, int n) {
//     int res = 1;
//     while (n) {
//         if (n & 1)
//             res = (1LL * res * a) % mod;
//         a = (1LL * a * a) % mod;
 
//         n >>= 1;
//     }
//     return res;
// }
// int C(int n, int k, const vector <long long> &fact, const vector <long long> &inv) {
//     if (k > n) return 0;
//     int multiply = (1LL * fact[n] * inv[k]) % mod;
//     multiply = (1LL * multiply * inv[n - k]) % mod;
//     return multiply;
// }
// bool comp(const pair<int, int>& a, const pair<int, int>& b)
// {
//   if(a.first==b.first){
//   return a.second < b.second;}
//   else{
//     return a.first>b.first;
//   }
// }
// bool isPowerOfTwo(int n)
// {
//     if (n == 0)
//         return false;
 
//     return (ceil(log2(n)) == floor(log2(n)));
// }
// int c(int x,int n){
//     return ( x ^ ( n - 1 ) );
// }
// bool fn(vector<pair<int,int>>seg,vector<int>query,int q,int n){
//   int pre[n]={0};
//   for(int i=0;i<q;i++){
// pre[query[i]-1]=1;
//   }
//   for(int i=1;i<n;i++){
//     pre[i]+=pre[i-1];
//   }
//   for(auto it :seg){
//     int st=it.first-1;
//     int en=it.second-1;
//     int ans=pre[en];
//     if(st>0){
// ans-=pre[st-1];
//     }
//     if(2*ans>(en-st+1)){
//       return 1;
//     }
//   }
//   return 0;
// }
 
// int digit_sum(int n) {
//     int ret = 0;
//     while(n) {
//         ret += n % 10;
//         n /= 10;
//     }
//     return ret;
// }
// int findComplement(int n) {
//    int bit_count = floor(log2(n))+1;
//    int ones = ((1 << bit_count) - 1);
//    return ones ^ n;
// }
// int dp[101][101][2][2];
// bool rep(int even,int odd,int score,int turn){
 
//   if(dp[even][odd][score][turn]!=-1){
//     return dp[even][odd][score][turn];
//   }
//   if(turn ==0){
//     if((even +odd)==0){
// return score%2==0;
//     }
//     bool f1=even>0 ?rep(even-1,odd,score,1):false;
//     bool f2=odd>0 ? rep(even,odd-1,(score+1)%2,1):false;
//   if(odd<=0){
//     return dp[even][odd][score][turn]=!f1;
//   }
//   else if (even<=0){
//     return dp[even][odd][score][turn]=!f2;
 
//   }
//   else{
//     return dp[even][odd][score][turn]=!(f1&f2);
//   }
   
//   }
//   else{
//     if(even+odd==0){
//       return score%2==1;
//     }
//       bool f1=even>0 ?rep(even-1,odd,score,0):false;
//     bool f2=odd>0 ? rep(even,odd-1,(score)%2,0):false;
//   if(odd<=0){
//     return dp[even][odd][score][turn]=!f1;
//   }
//   else if (even<=0){
//     return dp[even][odd][score][turn]=!f2;
 
//   }
//   else{
//     return dp[even][odd][score][turn]=!(f1&f2);
//   }
 
//   }
 
// }
int nCr(int n, int r) {
    // If r is greater than n, return 0
    if (r > n) return 0;
    // If r is 0 or equal to n, return 1
    if (r == 0 || n == r) return 1;
    // Initialize the logarithmic sum to 0
    double res = 0;
    // Calculate the logarithmic sum of the numerator and denominator using loop
    for (int i = 0; i < r; i++) {
        // Add the logarithm of (n-i) and subtract the logarithm of (i+1)
        res += log(n-i) - log(i+1);
    }
    // Convert logarithmic sum back to a normal number
    return (int)round(exp(res));
}
pair<int, int> getRatio(int a, int b) {
    int g = __gcd(a, b);
    a /= g;
    b /= g;
    return {a, b};
}
bool possible(int n){
 
for(int i=2;i<=sqrt(n);i++){
  int h=0;int ct=1;
  while(ct<=n){
    if(ct==n){ return true;}
    h++;
    ct=ct*i+1;}}
    return false;
 
}
int maxSubArraySum(vector<int>a, int size)
{
    int max_so_far = INT_MIN, max_ending_here = 0,
        start = 0, end = 0, s = 0;
 
    for (int i = 0; i < size; i++) {
        max_ending_here += a[i];
 
        if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
            start = s;
            end = i;
        }
 
        if (max_ending_here < 0) {
            max_ending_here = 0;
            s = i + 1;
        }
    }
   return max_so_far;
       
}
// string a,b;
// string s;
// bool mark[26];
// int ans,k;
// int ans1(){
//   int to=0,ct=0;

//   for(int i=0;i<a.size();i++){
    
//     if(a[i]==b[i]|| mark[a[i]-'a']==1){

//       ct++;
//     }
//     else{
     
//       to+=ct*(ct+1)/2;
     
//       ct=0;
//     }
//   }
//   to+=ct*(ct+1)/2;
//   return to;
// }


// void solve(int pos,int ct){
//   if(ct>k)return;
//   if(pos==s.size()){
//     if(ct==k){
      
//       ans=max(ans,ans1());
//     }
//     return;
//   }
//   solve(pos+1,ct);
//   mark[s[pos]-'a']=1;
//   solve(pos+1,ct+1);
//   mark[s[pos]-'a']=0;
// }
// const int NMAX = 1e9;
// const int SNMAX = (int)sqrt(NMAX) + 1;
// std::bitset<NMAX + 1> bits;
// const int N=200010;
// vector<int>adj[N];
// vector<bool>used;
// int go(int v){
//   used[v]=true;
//   for(auto now:adj[v]){
//     if(!used[now]){
//       return go(now)+1;
//     }
//   }
//   return 1;
// }
// int mod=1e9+7;
// int m;
// int dp[100005][105];
// int solve(vector<int>&a,int n,int x){
  
//   if(x>m || x<1)return 0;
//   if(n==1){
//     if(a[0]==x || a[0]==0){
//       return 1;
//     }
//     return 0;
//   }

//     if(a[n-1]!=x && a[n-1]!=0){return 0;}
    
//   if(dp[n][x]!=-1)return dp[n][x];

//   int ans=(solve(a, n - 1, x - 1)  + solve(a, n - 1, x) + solve(a, n - 1, x + 1)) % mod
//   ;
  
//   return dp[n][x]=ans;
// }
 // bool solve(int n,string s,int k){
 //  int cta=0,ctb=0;
 //  for(int i=0;i<n;i++){
 //    if(s[i]=='a')cta++;
 //    else{ctb++;}
 //  }
 //  if(min(cta,ctb)<=k)return true;
 //  for(int i=n;i<s.size();i++){
 //     if(s[i]=='a'){cta++;}
 //    else{ctb++;}
 //    if(s[i-n]=='a'){cta--;}
 //    else{
 //      ctb--;
 //    }
 // if(min(cta,ctb)<=k)return true;
 //  }
 // return false;

 // }
bool check(int m,int s){
  int sm=0;
  int h=m;
  while(m!=0){
    sm+=m%10;
    m=m/10;
  }
  return (h-sm)>=s;
}
// bool isPowerOfTwo(int n)
// {
//     if (n == 0)
//         return false;
 
//     return (ceil(log2(n)) == floor(log2(n)));
// }
int mex(vector<int> &arr, int N)
{
 
  // sort the array
  sort(arr.begin(), arr.end());
 
  int mex = 0;
  for (int idx = 0; idx < N; idx++)
  {
    if (arr[idx] == mex)
    {
      // Increment mex
      mex += 1;
    }
  }
 
  // Return mex as answer
  return mex;
}
// int helper(vector<vector<int>>&dp,int arr[],int l,int r,int h,int val,int i,int n){
//   if(i>=n){
// return (val>=l && val<=r);
//   }
//   if(dp[i][val]!=-1)return dp[i][val];

//   if(val>=l && val<=r)
//     {dp[i][val]=1+max(helper(dp,arr,l,r,h,(val+arr[i]-1)%h,i+1,n),helper(dp,arr,l,r,h,(val+arr[i])%h,i+1,n));}

// else{
//   dp[i][val]=max(helper(dp,arr,l,r,h,(val+arr[i]-1)%h,i+1,n),helper(dp,arr,l,r,h,(val+arr[i])%h,i+1,n));
// }
//   return dp[i][val];
// }
// const int N=1e3+5;
// int val=0;
// int dx[4]={-1, +1, 0, 0};
// int dy[4]={0, 0, +1, -1};
// int n,m,cursz=0,col=0;
// int comp[N][N], sz[N], vis[N][N], store[N];
// char a[N][N];

// void dfs(int i,int j){
//   if(i<1 || i>n || j<1 || j>m){
//     return;
//   }
//   if(a[i][j]=='*'){
//     return;
//   }
//   if(vis[i][j]){
//     return;
//   }
//   cursz++;
//   comp[i][j]=col;
//   vis[i][j]=1;
//   for(int k=0;k<4;k++){
//     dfs(i+dx[k],j+dy[k]);
//   }

// }
int leaf=0;

// void dfs(int i, int j)
// {
//   if(i<1 || i>n || j<1 || j>m)
//     return;
//   if(a[i][j]=='*')
//     return;
//   if(vis[i][j])
//     return;
//   cursz++;
//   vis[i][j]=1;
//   comp[i][j]=col;
//   for(int k=0;k<4;k++)
//     dfs(i+dx[k], j+dy[k]);
// }
// const int N=5000+5;
// int a[N],dp[N]={};

 
bool isPowerOfTwo(int n)
{
    if (n == 0)
        return false;
 
    return (ceil(log2(n)) == floor(log2(n)));
}
int count_changes(string a, string b) {
    // Count the number of digit positions that are different between strings a and b
    int changes = 0;
    for (int i = 0; i < a.size(); i++) {
        if (a[i] != b[i]) {
            changes++;
        }
    }
    return changes;
}
// vector<int>dp(200005);
// int helper(int n,int x,int y,vector<int>&fact){
//   if(n==0){
//     return 1;
//   }
//   int h,w;
//   h=fact[n];
//   w=fact[n+1];
//   if(y<=w-h || y>h){
//     int dx,dy;
//     if(y<=w-h){
//       dx=y;
//     }
//     else{
//       dx=y-h;
//     }
//     dy=x;
//     return helper(n-1,dx,dy,fact);
//   }
//   return 0;
// }
// const int N=100001;
// int a[N][2];
const int mod=1e9+7;
int  helper(int i , int k,int dir,vector<vector<vector<int>>>&dp,int n){
  
  if(k==1){
    return 1;
  }
  if(dp[i][k][dir]!=-1){
    return dp[i][k][dir];
  }
  int ans=2;
  if(dir==1){
    if(i<n){
ans+=helper(i+1,k,dir,dp,n)-1;
    }
    if(i>1){
      ans+=helper(i-1,k-1,1-dir,dp,n)-1;
    }
    ans%=mod;

  }
  else{
    if(i>1){
      ans+=helper(i-1,k,dir,dp,n)-1;
    }
    if(i<n){
      ans+=helper(i+1,k-1,1-dir,dp,n)-1;
    }
    ans%=mod;
  }

return dp[i][k][dir]=ans;
  
}
constexpr double Pi = std::atan2(0, -1);

unsigned long long power(unsigned long long x, 
                                  int y, int p)
{
    unsigned long long res = 1; // Initialize result
 
    x = x % p; // Update x if it is more than or
    // equal to p
 
    while (y > 0) 
    {
     
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;
 
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}
 
// Returns n^(-1) mod p
unsigned long long modInverse(unsigned long long n,  
                                            int p)
{
    return power(n, p - 2, p);
}
 
// Returns nCr % p using Fermat's little
// theorem.
unsigned long long nCrModPFermat(unsigned long long n,
                                 int r, int p)
{
    // If n<r, then nCr should return 0
    if (n < r)
        return 0;
    // Base case
    if (r == 0)
        return 1;
 
    // Fill factorial array so that we
    // can find all factorial of r, n
    // and n-r
    unsigned long long fac[n + 1];
    fac[0] = 1;
    for (int i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
 
    return (fac[n] * modInverse(fac[r], p) % p
            * modInverse(fac[n - r], p) % p)
           % p;
}
// pair<int,int>get_path_end(int i,vector<int>&edge){

//   int len=0;
//   int cur=i;
//   while(edge[cur]!=-1){
//     len++;
//     cur=edge[cur];
//   }
//   // cout<<i<<" "<<len<<endl;;
//   return {cur,len};
// }
// int ans[2000007];
// int a[1500][1500] = {}, curr = 1;

int32_t  main()
 
 {
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
     freopen("output.txt","w",stdout);
    #endif
IOS;
 
  // vector<int>fact(61,0);
  // vector<int>inv(61,0);
  // fact[0]=1;
  // for(int i=1;i<=60;i++){
  //   fact[i]=fact[i-1]*i;
  //   fact[i]%=mod;
  // }
  // for(int i=0;i<=60;i++){
  //   inv[i]=binPow(fact[i],mod-2);
  //   inv[i]%=mod;
 
  // }
 
  // memset(dp,sizeof(dp),-1);
//   for(int i=0;i<=100;i++){
//     for(int j=0;j<=100;j++){
//       for(int k=0;k<2;k++){
//         for(int l=0;l<2;l++){
//           dp[i][j]
// [k][l]=-1;        }
//       }
//     }
//   }
// vector<int>fac;
// int val=1;
// fac.push_back(val);
// for(int i=2;i<=17;i++){
//   val=val*i;
//   fac.push_back(val);
// }
int t ;
 // int mod=1e9+7;
 t=1;


  // for (int i = 1; i < 1500; i++) {
  //   for (int j = i - 1; j >= 1; j--) {
  //     a[j][i - j] = a[j - 1][i - j] + a[j][i - j - 1] - a[j - 1][i - j - 1] + curr * curr;
  //     ans[curr] = a[j][i - j];
  //     curr++;
  //   }}
cin>>t;
// vector<int>dp(1e5+1,0);
// for(int i=0;i<k;i++){
//   dp[i]=1;
// }
// for(int i=k;i<=1e5;i++){
//   dp[i]=dp[i-1]%mod;
//   dp[i]=(dp[i]+dp[i-k])%mod;
// }
// vector<bool>isprime(1e6+1,true);
// set<int>st;
// for(int i=2;i*i<=1e6;i++){
//  if(!isprime[i]){
//   continue;
//  }
//  for(int j=i*i;j<=1e6;j+=i){
//   isprime[j]=false;
//  }

//   }

// isprime[1]=false;
     
// set<int>ans;
// int num=0;
// for(int i=1;i<=1e6;i++){
// num=i+i*i+1;
// if(num>1e6){
//   break;
// }
// ans.insert(num);
// }


  
while(t--)
 {
int n,k;
cin>>n>>k;
if(n==1){
  cout<<k*k<<endl;continue;
}
if(k%n==0){
  cout<<k*(k/n)<<endl;
}
else if(__gcd(k,n)!=1){
  cout<<n*k/__gcd(k,n)<<endl;
}
else{
  cout<<k*n<<endl;
}



}
  return 0;}  
