/*
starting point : 
inherit                     -> += f[i + 1]
start extending with this   -> += dist
put this and nexts together -> += f[i + 1] + ... + f[n]
non-starting point :
inherit -> = f[i + 1]
*/
/*
vnssnssnssnssnssnssnssnssnssnssnssnssnssnssnssnssn
nssnssns
*/
#include <iostream>
#define int long long
using namespace std;
const int p = 1e9 + 7;
int f[1000005];
int nxt[1000005];
bool st[1000005];
int aft[1000005];
int suf[1000005];
int Suf[1000005];
int qpow(int x, int y) {
    int ret = 1;
    while (y) {
        if (y & 1) 
            ret = ret * x % p;
        y >>= 1;
        x = x * x % p;
    }
    return ret;
}
signed main() {
//    freopen("substr.in", "r", stdin);
//    freopen("substr.out", "w", stdout);
    string S, T;
    nxt[0] = -1;
    nxt[1] = 0;
    cin >> S >> T;
    int s = S.size(), t = T.size();
    S = ' ' + S, T = ' ' + T;
    for (int i = 2, j = 1; i <= t; i++) {
        if (T[i] == T[j]) 
            nxt[i] = nxt[i - 1] + 1, j++;
        else {
            while (j && T[j] != T[i]) j = nxt[j - 1] + 1;
            nxt[i] = j;
            j++;
        }
    }
    for (int i = 1, j = 1; i <= s;) {
        while (i <= s && j <= t && S[i] == T[j]) i++, j++;
        if (j == t + 1) 
            st[i - t] = 1;
        while (j && S[i] != T[j]) j = nxt[j - 1] + 1;
        if (j == 0) 
            i++, j++;
    }
    int lst = 0;
    for (int i = 1; i <= s; i++) {
//      cout << st[i] << " ";
        if (st[i]) 
            lst = aft[lst] = i;
    }
 // cout << "\n";
    int i = s;
    bool x = 0;
    for (; i; i--) {
        if (st[i]) {
            x = 1;
            f[i] = (s - i + 1 - t + 1) % p ;
            break;
        }
    }
    if (!x) 
        return 0 * puts("0");
    Suf[i] = suf[i] = (s - i + 1 - t + 1) % p;
    i--;
    int P = qpow(2, p - 2) % p;
    for (; i; i--) {
        f[i] = f[i + 1];
        if (st[i]) {
            f[i] = ((f[i] + aft[i] - i) % p + p) % p;
//            for (int j = i + t; j <= aft[i] + t - 1; j++) f[i] = (f[i] + suf[j]) % p;
            f[i] = (((f[i] + Suf[i + t] - Suf[aft[i] + t]) % p) + p) % p;
//            if (aft[i] + t - 1 >= i + t) 
//                f[i] = (f[i] + (suf[i + t] + suf[aft[i] + t - 1]) % p * (aft[i] + t - 1 - i - t + 1) % p * P % p) % p;
//            f[i] = ((f[i] + (aft[i] - i) * suf[i + t] % p) % p + p) % p;
        }
        suf[i] = (suf[i + 1] + f[i]) % p;
        Suf[i] = (Suf[i + 1] + suf[i]) % p;
    }
    int ans = 0;
    for (int i = 1; i <= s; i++) ans = (ans + f[i]) % p/*, cout << f[i] << " "*/;
//    cout << "\n";
    cout << (ans % p + p) % p << "\n";
    return 0;
}
