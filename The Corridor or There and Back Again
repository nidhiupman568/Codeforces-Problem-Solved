#include <bits/stdc++.h>
#include<algorithm>

using namespace std;
#define ll long long
#define nl '\n'
typedef vector<int> vi;
typedef pair<int, int> pi;
#define itn int
#define  nit int
#define  nti int
#define  tin int
#define  tni int
#define  all(v) v.begin(), v.end()
#define  F first
#define  S second
#define  PB push_back
#define MP make_pair


bool isPrime(int n) {

    if (n == 1) return false;
    if (n == 2) return true;
    if (n % 2 == 0) return false;
    for (int i = 3; i * i <= n; i += 2) {
        if (n % i == 0) return false;
    }
    return true;
}

int sumDigit(ll n) {
    int sum = 0;
    while (n != 0) {
        sum = sum + n % 10;
        n = n / 10;
    }
    return sum;
}

bool isPower2(ll n) {
    double x = log2(n);
    if (x - floor(x) == 0) return true;
    else return false;
}

int smallestPower(int n) {
    int x = (int) log2(n);
    return pow(2, x);
}

bool isInt(double n) {
    if (ceil(n) == floor(n)) return true;
    else return false;
}


vector<ll> removeDuplicates(vector<ll> arr, int n) {

    int i;
    set<ll> s;

    for (i = 0; i < n; i++) {

        s.insert(arr[i]);
    }
    set<ll>::iterator it;

    vector<ll> v;
    for (it = s.begin(), i = 0; it != s.end(); ++it, i++)
        v.push_back(*it);
    return v;
}


int numberDiv(int n) {
    int i = 1;
    int r = 0;
    while (i * i < n) {
        if (n % i == 0) r += 2;
        i++;

    }
    if (i * i == n) r++;
    return r;
}

bool isPerfectSquare(int x) {
    if (x >= 0) {
        long long sr = sqrt(x);
        return (sr * sr == x);
    }
    return false;
}

ll factorial(int n) {
    if (n == 0)
        return 1;
    ll factorial = 1;
    for (ll i = 2; i <= n; i++)
        factorial = factorial * i;
    return factorial;
}

ll nCr(int n, int r) {
    return factorial(n) / (factorial(r) * factorial(n - r));
}

ll NcR(int n, int r) {

    long long p = 1, k = 1;

    if (n - r < r)
        r = n - r;

    if (r != 0) {
        while (r) {
            p *= n;
            k *= r;
            long long m = __gcd(p, k);
            p /= m;
            k /= m;
            n--;
            r--;
        }

    } else
        p = 1;

    return p;
}

void SieveOfEratosthenes(int n) {
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));

    for (int p = 2; p * p <= n; p++) {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true) {
            // Update all multiples of p greater than or
            // equal to the square of it numbers which are
            // multiple of p and are less than p^2 are
            // already been marked.
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }

    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (prime[p])
            cout << p << " ";
}

vector<bool> sieve(int n) {
    vector<bool> isPrime(n + 1, true);    // set all of them to primes
    isPrime[0] = isPrime[1] = 0;        // 0, 1 are not primes

    for (ll i = 2; i * i <= n; ++i) {
        if (isPrime[i]) {
            for (int j = i * 2; j <= n; j += i)
                isPrime[j] = 0;
        }
    }

    int cnt = 0;

    /* for (int i = 0; i < (int) isPrime.size(); ++i)
         if (isPrime[i])
             cnt++;
 */
    return isPrime;
}


int binaryToInt(string s) {
    int x = 0;
    int p = 1;
    reverse(s.begin(), s.end());
    for (int i = 0; i < s.length(); ++i) {
        x += (s[i] - '0') * p;
        p *= 2;
    }
    return x;
}


/*while (l<=r){
int mid=(l+r)/2;
if(can(tab,n,mid)) {ans=mid; l=mid+1;}
else r=mid-1;
}
cout<<ans<<nl;*/
//ll f[1000001]={0};
//ll g[1000001]={0};
int di[] = {1, -1, 0, 0, 1, -1, 1, -1};
int dj[] = {0, 0, 1, -1, 1, -1, -1, 1};

bool croissant(vector<int> tab, int n) {
    for (int i = 1; i < n; ++i) {
        if (tab[i] < tab[i - 1]) return false;
    }
    return true;
}

bool decroissant(vector<int> tab, int n) {
    for (int i = 1; i < n; ++i) {
        if (tab[i] > tab[i - 1]) return false;
    }
    return true;
}


string toBinary(int n) {
    std::string r;
    while (n != 0) {
        r = (n % 2 == 0 ? "0" : "1") + r;
        n /= 2;
    }
    return r;
}


vector<ll> divisors(ll x) {
    vector<ll> a;
    for (int l = 1; l * l <= x; ++l) {
        if (x % l == 0) {
            if (l * l != x)
                a.push_back(x / l);
            a.push_back(l);
        }
    }
    return a;
}

/*cout.precision(20);
        cout << fixed << mx/ 2.0 << endl;*/


ll gcd(ll a, ll b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

ll lcm(ll a, ll b) {
    ll g = gcd(a, b);
    return (a * b) / g;
}


int pow(int a, int b) { // pow in log(b)
    if (b == 0)
        return 1;
    if (b == 1)
        return a;
    int x = pow(a, b / 2);
    if (b % 2 == 0)
        return x * x;
    else
        return x * x * a;
}

ll sumPow(ll a, int k) {
    if (k == 0) return 0;
    if (k % 2 == 1) return (a * sumPow(a, k - 1) + a);
    ll half = sumPow(a, k / 2);
    return half * (1 + half - sumPow(a, k / 2 - 1));

}

int compteur = 0;
vector<vector<int> > adj(20000);
vector<bool> visited(20000);

void initialize() {
    for (int i = 0; i < 20000; ++i)
        visited[i] = false;
}

void dfs(int node) {
    visited[node] = true;
    compteur++;

    for (int i = 0; i < adj[node].size(); ++i) {

        {
            int child = adj[node][i];
            if (!visited[child])    // To avoid cyclic behavior
            {
                dfs(child);
            }

            //topsort.push_back(node);    // DAG // Other way Indegree / Outdegree
        }
    }
}

int ConnectedComponenetsCnt() {
    int cnt = 0;
    for (int i = 0; i < adj.size(); ++i) {

        {
            if (!visited[i])    // Then no one reach this isolated node yet and its neighbors.
            {
                cnt++;
                dfs(i);

            }
        }
    }
    return cnt;

}


float power(float x, ll y, ll p) {
    float res = 1;
    if (y < 0) {
        y = -y;
        x = 1 / x;
    }
    while (y > 0) {
        if (y % 2 == 1)
            res = (res * x);
        y = y >> 1;
        x = (x * x);
    }
    return res;
}

ll power_no_mod(ll a, ll b) {
    ll result = 1;
    while (b) {
        if (b & 1) result *= a;
        a *= a;
        b /= 2;
    }
    return result;
}

ll power_with_mod(ll a, ll b, ll m) {
    ll result = 1;
    while (b) {
        if (b & 1) result = (result * a) % m;
        a = (a * a) % m;
        b /= 2;
    }
    return result;
}

map<ll, ll> cordinate_compression(vector<ll> a, ll start = 0, ll pas = 1) {
    set<ll> unique(a.begin(), a.end());
    map<ll, ll> mp;
    ll idx = 0;
    for (auto x: unique) {
        mp[x] = start + idx * pas;
        idx++;
    }

    return mp;
}

int maxSubArraySum(int a[], int size) {
    int max_so_far = INT_MIN, max_ending_here = 0;

    for (int i = 0; i < size; i++) {
        max_ending_here = max_ending_here + a[i];
        if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;

        if (max_ending_here < 0)
            max_ending_here = 0;
    }
    return max_so_far;
}

int mob(ll n) {
    int res = 0;
    if (n == 1)
        return 1;
    if (n == 2)
        return -1;
    if (n % 2 == 0) {
        n = n / 2;
        res++;
        if (n % 2 == 0)
            return 0;
    }
    for (int i = 3; i <= sqrt(n); i = i + 2) {
        if (n % i == 0) {
            n = n / i;
            res++;
            if (n % i == 0)
                return 0;
        }
    }

    return (res % 2 == 0) ? -1 : 1;
}

bool isSubsequence(string &s1, string &s2) {
    int n = s1.length(), m = s2.length();
    int i = 0, j = 0;
    while (i < n && j < m) {
        if (s1[i] == s2[j])
            i++;
        j++;
    }
    /*If i reaches end of s1,that mean we found all
    characters of s1 in s2,
    so s1 is subsequence of s2, else not*/
    return i == n;
}

int dp[1000000] = {0};


pair<double, double> interval_intersection(pair<double, double> a, pair<double, double> b) {
    if (a.first > b.first) swap(a, b);
    if (a.second < b.first) return {INT_MIN, INT_MIN};
    else return {b.first, min(a.second, b.second)};
}


bool can(ll mid, ll k, vector<ll> t) {
    ll sum = 0;
    for (int i = 0; i < t.size(); ++i) {
        sum += t[i] * 1LL;
        if (t[i] > mid) return false;
        if (sum > mid) {
            k--;
            sum = t[i] * 1LL;
        }
    }
    if (k >= 1) return true;
    else return false;


}

int rangeFactorization2(int n) // sum of number of factors of all numbers from 1 to n
{
    vector<int> numFactors(n + 1);

    for (int i = 1; i <= n; i++)
        for (int k = i; k <= n; k += i)
            numFactors[k]++;

    int s = 0;
    for (int i = 1; i <= n; i++)
        s += numFactors[i];
    return s;
}


#define MAXN 100001

// stores smallest prime factor for every number
int spf[MAXN];

// Calculating SPF (Smallest Prime Factor) for every
// number till MAXN.
// Time Complexity : O(nloglogn)
void sieve() {
    spf[1] = 1;
    for (int i = 2; i < MAXN; i++)

        // marking smallest prime factor for every
        // number to be itself.
        spf[i] = i;

    // separately marking spf for every even
    // number as 2
    for (int i = 4; i < MAXN; i += 2)
        spf[i] = 2;

    for (int i = 3; i * i < MAXN; i++) {
        // checking if i is prime
        if (spf[i] == i) {
            // marking SPF for all numbers divisible by i
            for (int j = i * i; j < MAXN; j += i)

                // marking spf[j] if it is not
                // previously marked
                if (spf[j] == j)
                    spf[j] = i;
        }
    }
}

// A O(log n) function returning primefactorization
// by dividing by smallest prime factor at every step
vector<int> getFactorization(int x) {
    vector<int> ret;
    while (x != 1) {
        ret.push_back(spf[x]);
        x = x / spf[x];
    }
    return ret;
}

ll bs(vector<ll> c, ll k) {
    ll l = 0, r = 1, m;
    while (can(r, k, c) == 0) r *= 2;
    while (r - l >= 0) {
        m = l + (r - l) / 2;
        can(m, k, c) ? r = m - 1 : l = m + 1;
    }
    return l + (r - l) / 2;
}

int mod(int a, int n) {
    return ((a % n) + a) % n;
}

//given a prime p and a number n , find the max power of p that divides n!
int maxPower(int n, int p) // O(log n / log p)
{
    // Initialize result
    int k = 0;
    for (int i = p; i <= n; i = i * p) {
        k = k + n / i;

    }
    return k;
}

//Factorial factorization
//seive on n
//for each prime p , find the max power of p that divides n!(maxPower(n,p))


void findkth(ll n, ll k) {
    // initialize vectors v1 and v2
    vector<ll> v1;
    vector<ll> v2;

    // store all the divisors in the two vectors
    // accordingly
    for (int i = 1; i <= sqrt(n); i++) {
        if (n % i == 0) {
            v1.push_back(i);

            if (i != sqrt(n))
                v2.push_back(n / i);
        }
    }

    // reverse the vector v2 to sort it
    // in increasing order
    reverse(v2.begin(), v2.end());

    // if k is greater than the size of vectors
    // then no divisor can be possible
    if (k > (v1.size() + v2.size()))
        cout << "-1";
        // else print the ( k - 1 )th value of vector
    else {
        // If K is lying in first vector
        if (k <= v1.size())
            cout << v1[k - 1];
            // If K is lying in second vector
        else
            cout << v2[k - v1.size() - 1];
    }
}

vector<ll> primeFactors(ll n) {
    vector<ll> v;
    // Print the number of 2s that divide n
    while (n % 2 == 0) {
        v.push_back(2);
        n = n / 2;
    }

    // n must be odd at this point. So we can skip
    // one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i + 2) {

        while (n % i == 0) {
            v.push_back(i);
            n = n / i;
        }
    }

    // This condition is to handle the case when n
    // is a prime number greater than 2
    if (n > 2)
        v.push_back(n);
    return v;
}

/*
op[i]=make_tuple(x,y,z);
tuple<ll,ll,ll> op[m];
ll x=get<0>(op[i]);
ll y=get<1>(op[i]);
ll z=get<2>(op[i]);*/

bool compare(pair<ll, ll> a, pair<ll, ll> b) {
    if (a.first == b.first) return a.second < b.second;
    else return a.first < b.first;
}
//to sort a vector but keeping index of each element
// we make a vector of pairs where first element is the element of the vector and second element is the index of that element
// then we sort the vector of pairs  using the function compare and we get the desired result



/*
void add(ll x, stack<ll> &min1 ,stack<ll> &max1,stack<ll> &s1,stack<ll> &min2 ,stack<ll> &max2,stack<ll> &s2){
    s2.push(x);
    if(min2.empty()) min2.push(x);
    else if(min2.top()>x) min2.push(x);
    else min2.push(min2.top());
    if(max2.empty()) max2.push(x);
    else if(max2.top()<x) max2.push(x);
    else max2.push(max2.top());

}
void remoove(ll x, stack<ll> &min1 ,stack<ll> &max1,stack<ll> &s1,stack<ll> &min2 ,stack<ll> &max2,stack<ll> &s2){
    if (s1.empty()){
        while (!s2.empty()){
            s1.push(s2.top());
            if(!min1.empty())
            min1.push(min(min1.top(),s2.top()));
            else min1.push(s2.top());
            if(!max1.empty())
            max1.push(max(max1.top(),s2.top()));
            else
            max1.push(s2.top());
            s2.pop();
            min2.pop();
            max2.pop();

        }
    }
    s1.pop();
    min1.pop();
    max1.pop();
}
bool good(ll k, stack<ll> &min1 ,stack<ll> &max1,stack<ll> &s1,stack<ll> &min2 ,stack<ll> &max2,stack<ll> &s2){
    if(s1.empty()&& s2.empty()) return true;
    if(s1.empty()) return max2.top()-min2.top()<=k;
    if(s2.empty()) return max1.top()-min1.top()<=k;
    return max(max1.top(),max2.top())-min(min1.top(),min2.top())<=k;
}
*/
struct node {
    ll seg, pref, suff, sum;

    node() {
        seg = 0;
        pref = 0;
        suff = 0;
        sum = 0;
    }

    node(ll seg, ll pref, ll suff, ll sum) : seg(seg), pref(pref), suff(suff), sum(sum) {}
};

const int N = 1e5 + 2;
node tree[4 * N];
ll A[N];
int n;

node merge(node x, node y) {
    ll s = x.sum + y.sum;
    ll p = max(x.sum + y.pref, x.pref);
    ll su = max(y.sum + x.suff, y.suff);
    ll seg = max(max(x.seg, y.seg), x.suff + y.pref);
    node ans(seg, p, su, s);
    return ans;

}

//building the initial segment tree
void build(int id = 0, int start = 0, int end = n - 1) {
    if (start == end) {
        // Leaf node will have a single element
        tree[id] = node(A[start], A[start], A[start], A[start]);
        return;
    } else {
        int left = id * 2 + 1;
        int right = left + 1;
        int mid = start + (end - start) / 2;
        // Recurse on the left child
        build(left, start, mid);
        // Recurse on the right child
        build(right, mid + 1, end);
        // Internal node will have the  merge of both of its children
        tree[id] = merge(tree[left], tree[right]);
    }
}

//updating an index of the array
void update(int idx, ll val, int id = 0, int start = 0, int end = n - 1) {
    if (start > idx || idx > end)
        return;
    if (start == end) {
        // Leaf node
        A[idx] = val;
        tree[id] = node(val, val, val, val);
        return;
    } else {
        int left = id * 2 + 1;
        int right = left + 1;
        int mid = start + (end - start) / 2;
        if (start <= idx and idx <= mid) {
            // If idx is in the left child, recurse on the left child
            update(idx, val, left, start, mid);
        } else {
            // if idx is in the right child, recurse on the right child
            update(idx, val, right, mid + 1, end);
        }
        tree[id] = merge(tree[left], tree[right]);
    }
}

//answering the query for the range [l..r]
node query(int l, int r, int id = 0, int start = 0, int end = n - 1) {
    if (r < start or end < l) {
        // range represented by a node is completely outside the given range
        //////////////////////////////////////////////////////////////
        return node(INT_MIN, INT_MIN, INT_MIN, INT_MIN);///!!!!NB  this value change depending on the merge
    }/////////////////////////////////////////////////////////
    if (l <= start and end <= r) {
        // range represented by a node is completely inside the given range
        return tree[id];
    }
    // range represented by a node is partially inside and partially outside the given range
    int left = id * 2 + 1;
    int right = left + 1;
    int mid = (start + end) / 2;
    node p1 = query(l, r, left, start, mid);
    node p2 = query(l, r, right, mid + 1, end);
    return merge(p1, p2);
}
//find k th element
ll find(ll k, int id, int start, int end) {
    if (start == end) return start;
    int left = id * 2 + 1;
    int right = left + 1;
    int mid = (start) + (end - start) / 2;
    //   if(tree[left]>k) return find(k,left,start,mid);
    // else return find(k-tree[left],right,mid+1,end);
}

ll find(ll k) {
    return find(k, 0, 0, n - 1);
}
int ans[200005];
int SZ=200005;
vector<int>adja[200005];
pair<int,int> bfs(int src)
{
	int d = 0;
	queue<pair<int,int> > q;
	q.push({src, 0});
	vector<bool> vis(SZ, false);
	pair<int,int>  u;
 
	while(!q.empty()) {
		u = q.front();
		vis[u.first] = true;
		q.pop();
		for(int v: adj[u.first])
			if(!vis[v])
			q.push({v, u.second + 1});
	}
	return u;
}
int main() {
    ios::sync_with_stdio(0);
    int cnt=0;
    cin.tie(0);
    cout.tie(0);
    //freopen("bad-memes.in", "r", stdin);
    int t;cin>>t;
    while(t--){
     int n;cin>>n;
     int a[n][2];
     for(int i=0;i<n;i++){
      for(int j=0;j<2;j++){
       cin>>a[i][j];
      }
     }
     int m=INT_MAX;
     for(int i=0;i<n;i++){
       if(a[i][1]&1){
        
        int r=(a[i][1])/2;
        m=min(m,r+a[i][0]);
       }
       else{
         int r=(a[i][1]-2)/2;
        m=min(m,r+a[i][0]);
       }
     }
     cout<<m<<endl;
    }
    return 0;
}
