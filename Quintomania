#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#define int long long int
//bool prime[10000009];

// vector<int> fact(2e5 + 5);

// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

// #define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

#define INF 1e9

#ifndef ONLINE_JUDGE
#define debug(x) cerr<< #x <<"= "; _print(x);cerr<<endl;
#else
#define debug(x)
#endif

#define reverse(v) reverse(v.begin(),v.end());
#define ascending(v) sort(v.begin(),v.end());
#define descending(v) sort(v.rbegin(),v.rend());
void _print(string a) {cerr << a;} void _print(int a) {cerr << a;} void _print(char a) {cerr << a;}
void _print(bool a) {cerr << a;} void _print(double a) {cerr << a;} void _print(float a) {cerr << a;}
template<class T, class V> void _print(unordered_map<T, V> m)
{
    cerr << "\n";
    for (auto &pr : m)
    {
        cerr << pr.first << "->";
        cerr << pr.second << "\n";
    }
}
template<class T, class V> void _print(map<T, vector<V>> m)
{
    cerr << "\n";
    for (auto &pr : m)
    {
        cerr << pr.first << "->";
        for (auto i : pr.second)
        {
            _print(i);
            cerr << " ";
        }
        cerr << "\n";
    }
}

template<class T, class V> void _print(map<T, set<V>> m)
{
    cerr << "\n";
    for (auto &pr : m)
    {
        cerr << pr.first << "->";
        for (auto i : pr.second)
        {
            _print(i);
            cerr << " ";
        }
        cerr << "\n";
    }
}

template<class T, class V> void _print(map<T, V> m)
{
    cerr << "\n";
    for (auto &pr : m)
    {
        _print(pr.first);
        cerr << "->";
        _print(pr.second);
        cerr << "\n";
    }
}

template<class T, class U, class V> void _print(map<pair<T, U>, V> m)
{
    cerr << "\n";
    for (auto &pr : m)
    {
        cerr << "{";
        _print(pr.first.first);
        cerr << ",";
        _print(pr.first.second);
        cerr << "}";
        cerr << "->";
        _print(pr.second);
        cerr << "\n";
    }
}

template<class T> void _print(vector<T> v1)
{
    cerr << "[";
    for (T i : v1)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}
template<class T, class V> void _print(vector<pair<T, V>> v1)
{
    cerr << "[";
    for (auto &pr : v1)
    {
        cerr << "{";
        _print(pr.first);
        cerr << " ";
        _print(pr.second);
        cerr << "}";
        cerr << " ";
    }
    cerr << "]";
}


template<class T> void _print(vector<vector<T>> v1)
{
    cerr << "\n";
    for (auto &vec : v1)
    {
        for (T i : vec)
        {
            _print(i);
            cerr << " ";
        }
        cerr << "\n";
    }
}

template<class T, class V> void _print(vector<vector<pair<T, V>>> v1)
{
    cerr << "\n";
    for (auto &vec : v1)
    {
        for (auto i : vec)
        {
            cerr << "{";
            _print(i.first);
            cerr << ",";
            _print(i.second);
            cerr << "} ";
        }
        cerr << "\n";
    }
}
template<class T> void _print(vector<set<T>> v1)
{
    for (auto &vec : v1)
    {
        for (T i : vec)
        {
            _print(i);
            cerr << " ";
        }
        cerr << "\n";
    }
}
template<class T> void _print(set<T> s1)
{
    cerr << "[";
    for (T i : s1)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}

template<class T, class V> void _print(set<pair<T, V>> s1)
{
    cerr << "[";
    for (auto i : s1)
    {
        cerr << "{";
        _print(i.first);
        cerr << ",";
        _print(i.second);
        cerr << "}";
    }
    cerr << "]";
}

template<class T> void _print(multiset<T> s1)
{
    cerr << "[";
    for (T i : s1)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}

template<class T> void _print(queue<T> q1)
{
    cerr << "[";
    while (!q1.empty())
    {
        T i = q1.front();
        q1.pop();
        cerr << i;
        cerr << " ";
    }
    cerr << "]";
}

template<class T, class V> void _print(queue<pair<T, V>> q1)
{
    cerr << "[";
    while (!q1.empty())
    {
        T i = q1.front().first;
        V j = q1.front().second;
        q1.pop();
        cerr << "{";
        cerr << i;
        cerr << ",";
        cerr << j;
        cerr << "}";
        cerr << " ";
    }
    cerr << "]";
}

template<class T> void _print(stack<T> st1)
{
    cerr << "[";
    while (!st1.empty())
    {
        _print(st1.top());
        st1.pop();
        cerr << " ";
    }
    cerr << "]";
}
template<class T> void _print(list<T> lis1)
{
    cerr << "[";
    for (T i : lis1)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}
template<class T> void _print(deque<T> lis1)
{
    cerr << "[";
    for (T i : lis1)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}
template<class T, class V> void _print(deque<pair<T, V>> lis1)
{
    cerr << "[";
    for (auto i : lis1)
    {
        cerr << "{";
        _print(i.first);
        cerr << " ";
        _print(i.second);
        cerr << "}";
    }
    cerr << "]";
}

template<class T> void _print(priority_queue<T> pq1)
{
    cerr << "[";
    while (!pq1.empty())
    {
        _print(pq1.top());
        pq1.pop();
        cerr << " ";
    }
    cerr << "]";
}

template<class T, class V> void _print(priority_queue<pair<T, V>> pq1)
{
    cerr << "[";
    while (!pq1.empty())
    {
        cerr << "{";
        _print(pq1.top().first);
        cerr << ",";
        _print(pq1.top().second);
        cerr << "}";
        pq1.pop();
        cerr << " ";
    }
    cerr << "]";
}


template<class T> void _print(priority_queue<T, vector<T>, greater<T>> pq1)
{
    cerr << "[";
    while (!pq1.empty())
    {
        _print(pq1.top());
        pq1.pop();
        cerr << " ";
    }
    cerr << "]";
}

template<class T, class V> void _print(pair<T, V> p)
{
    cerr << "[";
    _print(p.first);
    cerr << ",";
    _print(p.second);
    cerr << "]";
}
int moduloMultiplication(int a, int b,
                         int  mod)
{

    // Initialize result
    int  res = 0;

    // Update a if it is more than
    // or equal to mod
    a %= mod;

    while (b) {

        // If b is odd, add a with result
        if (b & 1)
            res = (res + a) % mod;

        // Here we assume that doing 2*a
        // doesn't cause overflow
        a = (2 * a) % mod;
        b >>= 1; // b = b / 2
    }
    return res;
}
int modpower(int x, int y, int p)
{
    int res = 1;     // Initialize result

    x = x % p; // Update x if it is more than or
    // equal to p

    if (x == 0) return 0; // In case x is divisible by p;

    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;

        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}

int power(int x, int y)
{
    int res = 1;     // Initialize result

    if (x == 0) return 0; // In case x is divisible by p;

    while (y > 0)
    {
        if (y & 1)
            res = (res * x);

        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x);
    }
    return res;
}
// C++ function for extended Euclidean Algorithm
int gcdExtended(int a, int b,
                int* x,
                int* y);

// Function to find modulo inverse of b. It returns
// -1 when inverse doesn't exists
int modInverse( int b,  int m)
{

    int x, y; // used in extended GCD algorithm
    int g = gcdExtended(b, m, &x, &y);

    // Return -1 if b and m are not co-prime
    if (g != 1)
        return -1;

    // m is added to handle negative x
    return (x % m + m) % m;
}

// C function for extended Euclidean Algorithm (used to
// find modular inverse.
int gcdExtended(int a, int b,
                int* x,
                int* y)
{

    // Base Case
    if (a == 0) {
        *x = 0, *y = 1;
        return b;
    }

    // To store results of recursive call
    int x1, y1;

    int gcd = gcdExtended(b % a, a, &x1, &y1);

    // Update x and y using results of recursive
    // call
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

// Function to compute a/b under modlo m
int modDivide( int a,  int b,
               int m)
{

    a = a % m;
    int inv = modInverse(b, m);
    if (inv == -1)
        // cout << "Division not defined";
        return 0;
    else
        return (inv * a) % m;
}

// Function to calculate nCr % p
// int nCr(int n, int r, int p)
// {
//     int calc1 = fact[n];
//     int calc2 = ((fact[n - r] % p) * (fact[r] % p)) % p;

//     return modDivide(calc1, calc2, p);
// }

// void SieveOfEratosthenes(int n)
// {
//     // Create a boolean array
//     // "prime[0..n]" and initialize
//     // all entries it as true.
//     // A value in prime[i] will
//     // finally be false if i is
//     // Not a prime, else true.
//     memset(prime, true, sizeof(prime));

//     for (int p = 2; p * p <= n; p++)
//     {
//         // If prime[p] is not changed,
//         // then it is a prime
//         if (prime[p] == true)
//         {
//             // Update all multiples
//             // of p greater than or
//             // equal to the square of it
//             // numbers which are multiple
//             // of p and are less than p^2
//             // are already been marked.
//             for (int i = p * p; i <= n; i += p)
//                 prime[i] = false;
//         }
//     }

//     prime[1] = false;
//     prime[0] = false;
// }

int binarySearch(int arr[], int l, int r, int x)
{
    if (r >= l) {
        int mid = l + (r - l) / 2;

        // If the element is present at the middle
        // itself
        if (arr[mid] == x)
            return mid;

        // If element is smaller than mid, then
        // it can only be present in left subarray
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);

        // Else the element can only be present
        // in right subarray
        return binarySearch(arr, mid + 1, r, x);
    }

    // We reach here when element is not
    // present in array
    return -1;
}

// void factorial(int p)
// {
//     fact[0] = 1;
//     fact[1] = 1;
//     for (int i = 2; i < fact.size(); i++)
//     {
//         fact[i] = (i * fact[i - 1]) % p;
//     }
// }

int gcd(int a, int b)
{
    // Everything divides 0
    if (a == 0)
        return b;
    if (b == 0)
        return a;

    // base case
    if (a == b)
        return a;

    // a is greater
    if (a > b)
        return gcd(a - b, b);
    return gcd(a, b - a);
}
int ceil(int a, int x)
{
    if (a % x == 0)
        return a / x;
    else
        return a / x + 1ll;
}
int countBits(int n)
{
    int count = 0;
    while (n)
    {
        count++;
        n >>= 1;
    }
    return count;
}
bool isPower(int x, int y)
{
    int res1 = log2(y) / log2(x);
    double res2 = log2(y) / log2(x);

    // compare to the result1 or result2 both are equal
    return (res1 == res2);
}
bool isPerfectSquare(int x)
{
    // Find floating point value of
    // square root of x.
    if (x >= 0) {

        int sr = sqrt(x);

        // if product of square root
        //is equal, then
        // return T/F
        return (sr * sr == x);
    }
    // else return false if n<0
    return false;
}

// vector<int> seg(4 * 100005);

// void build(int indx, int low, int high, vector<int> &a, vector<int> &prefixsum, vector<int> &prefixxor)
// {
//     if (low == high)
//     {
//         seg[indx] = a[low];
//         return;
//     }

//     int mid = (low + high) / 2;
//     build(2 * indx + 1, low, mid, a, prefixsum, prefixxor);
//     build(2 * indx + 2, mid + 1, high, a, prefixsum, prefixxor);

//     if (low == 0)
//     {
//         seg[indx] = prefixsum[high] - prefixxor[high];
//     }
//     else
//     {
//         seg[indx] = prefixsum[high] - prefixsum[low - 1] - (prefixxor[high] ^ prefixxor[low - 1]);
//     }
// }

// int query(int indx, int low, int high, int l, int r)
// {
//     if (low >= l && high <= r)
//     {
//         return seg[indx];
//     }

//     if (low > r || high < l)
//     {
//         return INT_MIN;
//     }
//     int mid = (low + high) / 2;

//     int left = query(2 * indx + 1, low, mid, l, r);
//     int right = query(2 * indx + 2, mid + 1, high, l, r);

//     return max(left, right);
// }

//--------------------------------------------------------------------------------------------------------------------------------------------
const int mod = 998244353;
const int M = 1e9 + 7;
const int inf = 1e18;
int findpar(int node, vector<int> &par)
{
    if (par[node] == node)
    {
        return node;
    }

    return par[node] = findpar(par[node], par);
}

// void merge(int u, int v, vector<int> &par, vector<int> &size)
// {
//     int paru = findpar(u, par); //ultimate par of u
//     int parv = findpar(v, par);

//     if (parv == paru) return;

//     if (size[paru] < size[parv])
//     {
//         //merge u to v
//         par[paru] = parv;
//         size[parv] += size[paru];
//     }
//     else
//     {
//         par[parv] = paru;
//         size[paru] += size[parv];
//     }
// }


int kthancestor(int node, int k, vector<vector<int>> &up, int LOG)
{
    for (int j = 0; j <= LOG; j++)
    {
        if (k & (1ll << j))
        {
            node = up[node][j];
        }
    }

    return node;
}

int get_lca(int a, int b, vector<int> &depth, vector<vector<int>> &up, int LOG)
{
    //always ensure a is the deepr node
    //without loss of generality

    if (depth[a] < depth[b])
    {
        swap(a, b);
    }

    int k = depth[a] - depth[b];

    //now find the kth ancestor of a to
    //bring a and b to the same level

    a = kthancestor(a, k, up, LOG);

    if (a == b)
    {
        return a;
        //a->b and b is the ancestor
    }

    for (int j = LOG; j >= 0; j--)
    {
        if (up[a][j] != up[b][j])
        {
            //jump to those nodes as
            //lca will be definitely above that
            a = up[a][j];
            b = up[b][j];
        }
    }

    //finally i will always be standing at one level below thw actual
    //lca
    return up[a][0];
}



void dfs(int node, vector<vector<int>> &adjacent, vector<bool> &visited,
         vector<int> &depth, vector<vector<int>> &up, int LOG)
{

    visited[node] = true;

    for (int child : adjacent[node])
    {
        if (visited[child]) continue;

        depth[child] = depth[node] + 1;
        up[child][0] = node;

        for (int j = 1; j <= LOG; j++)
        {
            up[child][j] = up[up[child][j - 1]][j - 1];
        }

        dfs(child, adjacent, visited, depth, up, LOG);
    }
}

void inp(int n, vector<int> &a)
{
    for (int i = 0; i < n; i++)
    {
        int x;
        cin >> x;
        a.push_back(x);
    }
}

void solve() {

    int n;
    cin >> n;

    vector<int> a;

    inp(n, a);

    for (int i = 1; i < n; i++)
    {
        if (abs(a[i] - a[i - 1]) == 5 || abs(a[i] - a[i - 1]) == 7)
        {
            continue;
        }

        cout << "NO" << "\n";
        return;
    }

    cout << "YES" << "\n";
    return;

}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    freopen("Error2.txt", "w", stderr);
#endif//ONinput_JUDGE
    int T = 1;
    cin >> T;
    int t = 1;


    //SieveOfEratosthenes(10000005);
    // debug((int)primes.size())
    // debug(primes);
    //factorial(M);

    while (T--)
    {
        //debug(T)
        cerr << T << "_________________________________" << "\n";
        //cout << "Case #" << t << ": ";
        solve();
        t++;
    }

}
